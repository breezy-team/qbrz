diff -Nur qbrz.org/lib/annotate.py qbrz/lib/annotate.py
--- qbrz.org/lib/annotate.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/annotate.py	2020-03-02 13:46:51.854169563 +0900
@@ -180,7 +180,7 @@
                     self.revno_width - (2 * text_margin),
                     rect.height())
                 paint_revno(painter, revno_rect,
-                            QtCore.QString(self.get_revno(revid)),
+                            str(self.get_revno(revid)),
                             self.max_mainline_digits)
                 
                 if revid in cached_revisions:
@@ -191,7 +191,7 @@
                         rect.top(),
                         rect.right() - revno_rect.right() - (2 * text_margin),
                         rect.height())
-                    author = QtCore.QString(get_apparent_author_name(rev))
+                    author = get_apparent_author_name(rev)
                     if fm.width(author) > author_rect.width():
                         author= fm.elidedText(author, QtCore.Qt.ElideRight,
                                               author_rect.width())                    
@@ -228,7 +228,7 @@
                 if revid in self.rev_colors:
                     painter.fillRect(rect, self.rev_colors[revid])
                 
-                block = next(block)
+                block = block.next()
             del painter
         QtGui.QPlainTextEdit.paintEvent(self, event)
     
@@ -498,9 +498,9 @@
         ordered_revids = []
 
         self.processEvents()
-        for revid, text in annotate_tree.annotate_iter(path, file_id=fileId):
+        for revid, text in annotate_tree.annotate_iter(path):
             if revid == CURRENT_REVISION:
-                revid = CURRENT_REVISION + annotate_tree.basedir
+                revid = CURRENT_REVISION + annotate_tree.basedir.encode("utf-8")
             
             text = text.decode(self.encoding, 'replace')
             
@@ -679,7 +679,7 @@
         try:
             self.branch.lock_read()
             try:
-                revid = str(self.log_list.currentIndex().data(logmodel.RevIdRole).toString())
+                revid = self.log_list.currentIndex().data(logmodel.RevIdRole)
                 if revid.startswith(CURRENT_REVISION):
                     rev = cached_revisions[revid]
                     self.annotate_tree = self.working_tree
@@ -777,7 +777,8 @@
         go = self.addAction(get_icon("go-next"), gettext("Go"))
         
         spacer = QtGui.QWidget()
-        spacer.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
+        spacer.setSizePolicy(QtGui.QSizePolicy.Expanding,
+                             QtGui.QSizePolicy.Expanding)
         self.addWidget(spacer)
         
         close = QtGui.QAction(self)
diff -Nur qbrz.org/lib/cat.py qbrz/lib/cat.py
--- qbrz.org/lib/cat.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/cat.py	2020-03-02 11:03:29.841799524 +0900
@@ -144,11 +144,11 @@
             
             self.tree.lock_read()
             try:
-                kind = self.tree.kind(self.filename, self.file_id)
+                kind = self.tree.kind(self.filename)
                 if kind == 'file':
-                    text = self.tree.get_file_text(self.filename, self.file_id)
+                    text = self.tree.get_file_text(self.filename)
                 elif kind == 'symlink':
-                    text = self.tree.get_symlink_target(self.filename, self.file_id)
+                    text = self.tree.get_symlink_target(self.filename)
                 else:
                     text = ''
             finally:
@@ -184,7 +184,7 @@
         Supported file types: text, image, binary
         """
         if kind == 'file':
-            if not '\0' in text:
+            if not b'\0' in text:
                 return 'text file', self._create_text_view
             else:
                 ext = file_extension(relpath).lower()
diff -Nur qbrz.org/lib/commands.py qbrz/lib/commands.py
--- qbrz.org/lib/commands.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/commands.py	2020-03-02 13:47:25.837734441 +0900
@@ -272,7 +272,7 @@
             if file_id is None:
                 raise errors.NotVersionedError(filename)
             [(path, entry)] = list(tree.iter_entries_by_dir(
-                specific_file_ids=[file_id]))
+                specific_files=[filename]))
             if entry.kind != 'file':
                 raise errors.BzrCommandError(
                         'bzr qannotate only works for files (got %r)' % entry.kind)
@@ -997,7 +997,7 @@
         from breezy.plugins.qbrz.lib.switch import QBzrSwitchWindow
 
         branch = Branch.open_containing(CUR_DIR)[0]
-        contrldir = ControlDir.open_containing(CUR_DIR)[0]
+        controldir = ControlDir.open_containing(CUR_DIR)[0]
         self.main_window = QBzrSwitchWindow(branch, controldir, location, ui_mode)
         self.main_window.show()
         self._application.exec_()
diff -Nur qbrz.org/lib/commit.py qbrz/lib/commit.py
--- qbrz.org/lib/commit.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/commit.py	2020-03-02 13:44:10.723527443 +0900
@@ -71,7 +71,7 @@
         QtGui.QTextEdit.__init__(self, parent)
         self.completer = None
         self.spell_checker = spell_checker
-        self.eow = QtCore.QString("~!@#$%^&*()_+{}|:\"<>?,./;'[]\\-=")
+        self.eow = "~!@#$%^&*()_+{}|:\"<>?,./;'[]\\-="
         self.main_window = main_window
 
     def inputMethodEvent(self, e):
@@ -202,7 +202,7 @@
         
         # XXX We should make this show all selected revisions...
         
-        revid = str(index.data(logmodel.RevIdRole).toString())
+        revid = index.data(logmodel.RevIdRole)
         branch = self.log_model.graph_viz.get_revid_branch(revid)
         parent_window = self.window()
         window = RevisionView(revid, branch, parent=parent_window)
diff -Nur qbrz.org/lib/conditional_dataview.py qbrz/lib/conditional_dataview.py
--- qbrz.org/lib/conditional_dataview.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/conditional_dataview.py	2020-03-02 11:03:30.010803758 +0900
@@ -16,7 +16,7 @@
 
 
 from PyQt4 import QtGui
-from PyQt4.QtCore import Qt, QVariant
+from PyQt4.QtCore import Qt
 
 
 class QBzrConditionalDataView(QtGui.QFrame):
@@ -113,11 +113,11 @@
                 icon = decoration_provider(row, record)
                 if icon:
                     index = model.index(row, 0)
-                    model.setData(index, QVariant(icon), Qt.DecorationRole)
+                    model.setData(index, icon, Qt.DecorationRole)
             for col, value in enumerate(record):
                 #print "putting %s into %d,%d" % (value, row, col)
                 index = model.index(row, col)
-                model.setData(index, QVariant(value or ''), cell_role)
+                model.setData(index, value or '', cell_role)
 
         # Update the view & label
         self._view.setVisible(row_count > 0)
diff -Nur qbrz.org/lib/config.py qbrz/lib/config.py
--- qbrz.org/lib/config.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/config.py	2020-03-02 17:21:47.237605778 +0900
@@ -112,7 +112,7 @@
 
         self.emailClientCombo = QtGui.QComboBox()
         for name, label in _mail_clients:
-            self.emailClientCombo.addItem(gettext(label), QtCore.QVariant(name))
+            self.emailClientCombo.addItem(gettext(label), name)
         label = QtGui.QLabel(gettext("E-mail &client:"))
         label.setBuddy(self.emailClientCombo)
         generalGrid.addWidget(label, 3, 0)
@@ -265,7 +265,7 @@
         self.spellcheck_language_combo = QtGui.QComboBox()
         languages = sorted(SpellChecker.list_languages())
         for name in languages:
-            self.spellcheck_language_combo.addItem(gettext(name), QtCore.QVariant(name))
+            self.spellcheck_language_combo.addItem(gettext(name), name)
         if not languages:
             self.spellcheck_language_combo.setEnabled(False)
         label = QtGui.QLabel(gettext("Spell check &language:"))
@@ -337,8 +337,7 @@
         # E-mail client
         mailClient = config.get_user_option('mail_client')
         if mailClient:
-            index = self.emailClientCombo.findData(
-                QtCore.QVariant(mailClient))
+            index = self.emailClientCombo.findData(mailClient)
             if index >= 0:
                 self.emailClientCombo.setCurrentIndex(index)
 
@@ -348,8 +347,7 @@
         # Spellcheck language
         spellcheck_language = config.get_user_option('spellcheck_language') or 'en'
         if spellcheck_language:
-            index = self.spellcheck_language_combo.findData(
-                QtCore.QVariant(spellcheck_language))
+            index = self.spellcheck_language_combo.findData(spellcheck_language)
             if index >= 0:
                 self.spellcheck_language_combo.setCurrentIndex(index)
 
@@ -498,7 +496,7 @@
 
         # E-mail client
         index = self.emailClientCombo.currentIndex()
-        mail_client = str(self.emailClientCombo.itemData(index).toString())
+        mail_client = self.emailClientCombo.itemData(index)
         set_or_delete_option(parser, 'mail_client', mail_client)
 
         tabWidth = self.tabWidthSpinner.value()
@@ -506,7 +504,7 @@
 
         # Spellcheck language
         index = self.spellcheck_language_combo.currentIndex()
-        spellcheck_language = str(self.spellcheck_language_combo.itemData(index).toString())
+        spellcheck_language = self.spellcheck_language_combo.itemData(index)
         set_or_delete_option(parser, 'spellcheck_language', spellcheck_language)
 
         # Branch source basedir
@@ -904,14 +902,14 @@
         cmdline = self.get_merge_tool_command_line(index.row())
         if role == QtCore.Qt.DisplayRole:
             if index.column() == self.COL_NAME:
-                return QtCore.QVariant(name)
+                return name
             elif index.column() == self.COL_COMMANDLINE:
-                return QtCore.QVariant(cmdline)
+                return cmdline
         elif role == QtCore.Qt.EditRole:
             if index.column() == self.COL_NAME:
-                return QtCore.QVariant(name)
+                return name
             elif index.column() == self.COL_COMMANDLINE:
-                return QtCore.QVariant(cmdline)
+                return cmdline
         elif role == QtCore.Qt.CheckStateRole:
             if index.column() == self.COL_NAME:
                 return self._default == name and QtCore.Qt.Checked or QtCore.Qt.Unchecked
@@ -919,7 +917,7 @@
             if name in self._known:
                 palette = QtGui.QApplication.palette()
                 return palette.alternateBase()
-        return QtCore.QVariant()
+        return None
         
     def setData(self, index, value, role):
         name = self._order[index.row()]
@@ -932,7 +930,7 @@
                     self._removed.append(name)
                 del self._order[index.row()]
                 del self._user[name]
-                new_name = str(value.toString())
+                new_name = str(value)
                 self._order.insert(index.row(), new_name)
                 self._user[new_name] = cmdline
                 if self._default == name:
@@ -942,7 +940,7 @@
                 self.sort(self.COL_NAME, QtCore.Qt.AscendingOrder)
                 return True
             elif index.column() == self.COL_COMMANDLINE:
-                self._user[name] = str(value.toString())
+                self._user[name] = str(value)
                 self.emit(QtCore.SIGNAL("dataChanged(QModelIndex,QModelIndex)"),
                           index, index)
                 return True
@@ -956,7 +954,7 @@
         return False
         
     def flags(self, index):
-        f = super(MergeToolsTableModel, self).flags(index)
+        f = super().flags(index)
         name = self._order[index.row()]
         if name not in self._known:
             f = f | QtCore.Qt.ItemIsEditable
@@ -968,11 +966,11 @@
         if orientation == QtCore.Qt.Horizontal:
             if section == self.COL_NAME:
                 if role == QtCore.Qt.DisplayRole:
-                    return QtCore.QVariant(gettext("Name"))
+                    return gettext("Name")
             elif section == self.COL_COMMANDLINE:
                 if role == QtCore.Qt.DisplayRole:
-                    return QtCore.QVariant(gettext("Command Line"))
-        return QtCore.QVariant()
+                    return gettext("Command Line")
+        return None
 
     def sort(self, column, sortOrder):
         self.emit(QtCore.SIGNAL("layoutAboutToBeChanged()"))
diff -Nur qbrz.org/lib/conflicts.py qbrz/lib/conflicts.py
--- qbrz.org/lib/conflicts.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/conflicts.py	2020-03-02 11:03:29.900801002 +0900
@@ -174,8 +174,8 @@
             item = QtGui.QTreeWidgetItem()
             item.setText(0, conflict.path)
             item.setText(1, gettext(conflict.typestring))
-            item.setData(0, QtCore.Qt.UserRole, QtCore.QVariant(conflict.file_id or ''))  # file_id is None for non-versioned items, so we force it to be empty string to avoid Qt error
-            item.setData(1, QtCore.Qt.UserRole, QtCore.QVariant(conflict.typestring))
+            item.setData(0, QtCore.Qt.UserRole, conflict.file_id or '')  # file_id is None for non-versioned items, so we force it to be empty string to avoid Qt error
+            item.setData(1, QtCore.Qt.UserRole, conflict.typestring)
             items.append(item)
 
         if len(items) == 0 and self.conflicts_list.topLevelItemCount() > 0:
@@ -214,7 +214,7 @@
             return
         config = GlobalConfig()
         cmdline = config.find_merge_tool(str(self.merge_tools_combo.currentText()))
-        file_id = str(items[0].data(0, QtCore.Qt.UserRole).toString())
+        file_id = items[0].data(0, QtCore.Qt.UserRole)
         if not file_id:
             # bug https://bugs.launchpad.net/qbrz/+bug/655451
             return
@@ -266,7 +266,7 @@
         items = self.conflicts_list.selectedItems()
         error_msg = ""
         enabled = True
-        if len(items) != 1 or items[0].data(1, QtCore.Qt.UserRole).toString() != "text conflict":
+        if len(items) != 1 or items[0].data(1, QtCore.Qt.UserRole) != "text conflict":
             enabled = False
         config = GlobalConfig()
         tool = str(self.merge_tools_combo.currentText())
diff -Nur qbrz.org/lib/diff.py qbrz/lib/diff.py
--- qbrz.org/lib/diff.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/diff.py	2020-03-02 13:52:14.598534235 +0900
@@ -119,7 +119,7 @@
         for name, command in list(ext_diffs.items()):
             if command == "" and include_builtin or not command == "":
                 action = QtGui.QAction(name, self)
-                action.setData(QtCore.QVariant (command))
+                action.setData(command)
                 if command == default_diff and set_default:
                     self.setDefaultAction(action)
                 self.addAction(action)
@@ -128,8 +128,8 @@
                      self.triggered)
     
     def triggered(self, action):
-        ext_diff = str(action.data().toString())
-        self.emit(QtCore.SIGNAL("triggered(QString)"), QtCore.QString(ext_diff))
+        ext_diff = str(action.data())
+        self.emit(QtCore.SIGNAL("triggered(QString)"), ext_diff)
 
 
 class DiffButtons(QtGui.QWidget):
@@ -164,7 +164,7 @@
 
     def triggered(self, ext_diff=None):
         if ext_diff is None:
-            ext_diff = QtCore.QString(default_diff)
+            ext_diff = default_diff
         self.emit(QtCore.SIGNAL("triggered(QString)"), ext_diff)
 
 
@@ -237,7 +237,7 @@
         for ix in range(2):
             if versioned[ix]:
                 try:
-                    dates[ix] = trees[ix].get_file_mtime(paths[ix], file_id)
+                    dates[ix] = trees[ix].get_file_mtime(paths[ix])
                 except OSError as e:
                     if not renamed or e.errno != errno.ENOENT:
                         raise
@@ -265,7 +265,7 @@
         else:
             status = N_('modified')
         # check filter options
-        if filter and not list(filter(status)):
+        if filter and not filter(status):
             return None
 
         return cls(trees, file_id, paths, changed_content, versioned, kind, 
diff -Nur qbrz.org/lib/diffview.py qbrz/lib/diffview.py
--- qbrz.org/lib/diffview.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/diffview.py	2020-03-02 13:48:52.823180316 +0900
@@ -711,7 +711,7 @@
                         heights[i] = image.height()
                         self.docs[i].addResource(QtGui.QTextDocument.ImageResource,
                                         QtCore.QUrl(file_id),
-                                        QtCore.QVariant(image))
+                                        image)
             
             max_height = max(heights)
             for i, cursor in enumerate(self.cursors):
diff -Nur qbrz.org/lib/encoding_selector.py qbrz/lib/encoding_selector.py
--- qbrz.org/lib/encoding_selector.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/encoding_selector.py	2020-03-02 13:45:33.530882457 +0900
@@ -40,7 +40,8 @@
             self._data.append(item)
 
     def __add__(self, other):
-        self._data.extend(other)
+        for item in other:
+            self.append(item)
         return UniqueList(self._data)
 
     def __iter__(self):
@@ -119,7 +120,7 @@
         self.chooser = QtGui.QComboBox()
         self.chooser.addItems(self.encodings)
         self.chooser.setEditable(True)
-        self.chooser.setEditText(QtCore.QString(self.encoding))
+        self.chooser.setEditText(self.encoding)
         self.connect(self.chooser, QtCore.SIGNAL("currentIndexChanged(QString)"),
                      self._encodingChanged)
         self.chooser.focusOutEvent = self._focusOut
@@ -134,7 +135,7 @@
         QtGui.QComboBox.focusOutEvent(self.chooser, ev)
 
     def _setEncoding(self, encoding):
-        self.chooser.setEditText(QtCore.QString(encoding))
+        self.chooser.setEditText(encoding)
 
     def getLabel(self):
         return str(self._label.text())
@@ -163,6 +164,7 @@
             self.onChanged = lambda encoding: None
         
         self.setTitle(label_text)
+        self.setStyleSheet("QMenu { menu-scrollable: 1; }")
         
         self.action_group = QtGui.QActionGroup(self)
         
@@ -170,7 +172,7 @@
         for encoding in self.encodings:
             action = QtGui.QAction(encoding, self.action_group)
             action.setCheckable(True)
-            action.setData(QtCore.QVariant(encoding))
+            action.setData(encoding)
             self.addAction(action)
             self.encoding_actions[encoding] = action
         
@@ -179,7 +181,7 @@
                      self.triggered)
     
     def triggered(self, action):
-        encoding = str(action.data().toString())
+        encoding = action.data()
         self._encodingChanged(encoding)
 
     def _setEncoding(self, encoding):
diff -Nur qbrz.org/lib/html_log.py qbrz/lib/html_log.py
--- qbrz.org/lib/html_log.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/html_log.py	2020-03-02 17:24:28.887041791 +0900
@@ -15,7 +15,7 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
 
-from cgi import escape
+from html import escape
 import codecs
 from io import StringIO
 
diff -Nur qbrz.org/lib/ignore.py qbrz/lib/ignore.py
--- qbrz.org/lib/ignore.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ignore.py	2020-03-02 17:24:49.991359828 +0900
@@ -116,18 +116,18 @@
             item = QtGui.QTreeWidgetItem()
             item.setText(0, i)
             item.setText(1, file_extension(i))
-            item.setData(0, QtCore.Qt.UserRole, QtCore.QVariant(i))
-            item.setData(2, QtCore.Qt.UserRole, QtCore.QVariant(ACTION_NONE))
+            item.setData(0, QtCore.Qt.UserRole, i)
+            item.setData(2, QtCore.Qt.UserRole, ACTION_NONE)
             items.append(item)
             self.unknowns[i] = item
         self.unknowns_list.clear()
         self.unknowns_list.addTopLevelItems(items)
 
     def _filename_from_item(self, item):
-        return str(item.data(0, QtCore.Qt.UserRole).toString())
+        return item.data(0, QtCore.Qt.UserRole)
 
     def _action_from_item(self, item):
-        return str(item.data(2, QtCore.Qt.UserRole).toString())
+        return item.data(2, QtCore.Qt.UserRole)
 
     def item_clicked(self, item, column):
         self._enable_actions()
@@ -191,11 +191,11 @@
 
     def _clear_action_for_item(self, item, pattern, action):
         item.setText(2, '')
-        item.setData(2, QtCore.Qt.UserRole, QtCore.QVariant(action))
+        item.setData(2, QtCore.Qt.UserRole, action)
 
     def _set_pattern_action_for_item(self, item, pattern, action):
         item.setText(2, pattern)
-        item.setData(2, QtCore.Qt.UserRole, QtCore.QVariant(action))
+        item.setData(2, QtCore.Qt.UserRole, action)
 
 # ignore pattern for *.foo case-insensitive RE:(?i).*\.foo
 # ignore pattern for files without extension (.first dot allowed though) RE:\.?[^.]+
diff -Nur qbrz.org/lib/init.py qbrz/lib/init.py
--- qbrz.org/lib/init.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/init.py	2020-03-02 17:25:10.766672907 +0900
@@ -15,7 +15,7 @@
 # You should have received a copy of the GNU General Public License
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
-from PyQt4 import QtCore
+from PyQt4 import QtCore, QtGui
 import os
 
 from breezy.commands import get_cmd_object
@@ -105,7 +105,7 @@
     """
 
     def index_changed(index, combo=combo, desc_widget=desc_widget):
-        help = combo.itemData(index).toString()
+        help = combo.itemData(index)
         desc_widget.setText(help)
 
     default_index = 0
@@ -116,7 +116,7 @@
         name, short_name, argname, help = info
         if option.is_hidden(name):
             continue
-        user_data = QtCore.QVariant(help or '')
+        user_data = help or ''
         combo.addItem(name, user_data)
         if name == default:
             default_index = combo.count() - 1
diff -Nur qbrz.org/lib/lazycachedrevloader.py qbrz/lib/lazycachedrevloader.py
--- qbrz.org/lib/lazycachedrevloader.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/lazycachedrevloader.py	2020-03-02 17:52:22.718231538 +0900
@@ -18,7 +18,7 @@
 # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 
 #import weakref
-from time import clock
+import time
 
 from PyQt4 import QtCore
 
@@ -38,7 +38,7 @@
                    revisions_loaded = None,
                    pass_prev_loaded_rev = False):
     
-    start_time = clock()
+    start_time = time.process_time()
     showed_throbber = False
     revids = [revid for revid in revids if not revid == "root:"]
     return_revisions = {}
@@ -75,7 +75,7 @@
                         
                         for offset in range(0, len(revids), batch_size):
                             
-                            running_time = clock() - start_time
+                            running_time = time.process_time() - start_time
                             
                             if time_before_first_ui_update < running_time:
                                 if revisions_loaded is not None:
diff -Nur qbrz.org/lib/log.py qbrz/lib/log.py
--- qbrz.org/lib/log.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/log.py	2020-03-02 19:01:38.396359246 +0900
@@ -156,17 +156,17 @@
         self.searchType = QtGui.QComboBox()
             
         self.searchType.addItem(gettext("Messages"),
-                                QtCore.QVariant(self.FilterMessageRole))
+                                self.FilterMessageRole)
         self.searchType.addItem(gettext("Authors"),
-                                QtCore.QVariant(self.FilterAuthorRole))
+                                self.FilterAuthorRole)
         self.searchType.addItem(gettext("Revision IDs"),
-                                QtCore.QVariant(self.FilterIdRole))
+                                self.FilterIdRole)
         self.searchType.addItem(gettext("Revision Numbers"),
-                                QtCore.QVariant(self.FilterRevnoRole))
+                                self.FilterRevnoRole)
         self.searchType.addItem(gettext("Tags"),
-                                QtCore.QVariant(self.FilterTagRole))
+                                self.FilterTagRole)
         self.searchType.addItem(gettext("Bugs"),
-                                QtCore.QVariant(self.FilterBugRole))
+                                self.FilterBugRole)
         searchbox.addWidget(self.searchType)
         self.connect(self.searchType,
                      QtCore.SIGNAL("currentIndexChanged(int)"),
@@ -363,7 +363,7 @@
             if indexes_availble:
                 self.searchType.insertItem(0,
                         gettext("Messages and File text (indexed)"),
-                        QtCore.QVariant(self.FilterSearchRole))
+                        self.FilterSearchRole)
                 self.searchType.setCurrentIndex(0)
                 
                 self.completer = Compleater(self)
@@ -454,7 +454,7 @@
     def update_search(self):
         # TODO in_paths = self.search_in_paths.isChecked()
         gv = self.log_list.log_model.graph_viz
-        role = self.searchType.itemData(self.searchType.currentIndex()).toInt()[0]
+        role = self.searchType.itemData(self.searchType.currentIndex())
         search_text = str(self.search_edit.text())
         if search_text == "":
             self.log_list.set_search(None, None)
@@ -733,9 +733,9 @@
                  is_not_specific_file_id,
                  display, color, is_alive) in sorted(items, key = lambda x: (x[2],x[1])):
                 item = QtGui.QListWidgetItem(display, self.file_list)
-                item.setData(PathRole, QtCore.QVariant(path))
-                item.setData(file_idRole, QtCore.QVariant(id))
-                item.setData(AliveRole, QtCore.QVariant(is_alive))
+                item.setData(PathRole, path)
+                item.setData(file_idRole, id)
+                item.setData(AliveRole, is_alive)
                 if color:
                     item.setTextColor(QtGui.QColor(color))
                 if not is_not_specific_file_id:
@@ -804,9 +804,9 @@
         #
         for index in indexes:
             item = self.file_list.itemFromIndex(index)
-            paths.append(str(item.data(PathRole).toString()))
-            ids.append(str(item.data(file_idRole).toString()))
-            alives.append(bool(item.data(AliveRole).toBool()))
+            paths.append(str(item.data(PathRole)))
+            ids.append(item.data(file_idRole))
+            alives.append(bool(item.data(AliveRole)))
         return paths, ids, alives
 
     @ui_current_widget
@@ -854,9 +854,9 @@
         path = paths[0]
         tree.lock_read()
         try:
-            kind = tree.kind(path, file_id)
+            kind = tree.kind(path)
             if kind == 'file':
-                file_content_bytes = tree.get_file_text(path, file_id)
+                file_content_bytes = tree.get_file_text(path)
         finally:
             tree.unlock()
         if kind != 'file':
diff -Nur qbrz.org/lib/loggraphviz.py qbrz/lib/loggraphviz.py
--- qbrz.org/lib/loggraphviz.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/loggraphviz.py	2020-03-02 17:27:07.569433093 +0900
@@ -476,7 +476,7 @@
         # appear to the left.
         
         if len(x) == 0:
-            return (merge_depth)
+            return (merge_depth, 0, 0)
         else:
             return (merge_depth, -x[0], x[1])
     
@@ -1446,7 +1446,7 @@
                 tree.lock_read()
                 try:
                     for file_id in self.file_ids:
-                        if tree.kind(tree.id2path(file_id), file_id) in ('directory',
+                        if tree.kind(tree.id2path(file_id)) in ('directory',
                                                   'tree-reference'):
                             self.has_dir = True
                             break
diff -Nur qbrz.org/lib/logmodel.py qbrz/lib/logmodel.py
--- qbrz.org/lib/logmodel.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/logmodel.py	2020-03-02 17:57:59.288649643 +0900
@@ -18,7 +18,8 @@
 # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 
 from PyQt4 import QtCore, QtGui
-from time import (strftime, localtime, clock)
+from time import (strftime, localtime)
+import time
 import re
 import fnmatch
 
@@ -135,13 +136,13 @@
         # 10:1. If we spend 1 sec calling invaladate_filter_cache_revs, don't
         # call it again until we have spent 10 sec else where.
         if (last_call or revs is None or 
-            clock() - self.last_call_time > self.last_run_time * 10):
+            time.process_time() - self.last_call_time > self.last_run_time * 10):
             
-            start_time = clock()
+            start_time = time.process_time()
             self.filter_changed_callback(self.pending_revs, last_call)
             self.pending_revs = []
-            self.last_run_time = clock() - start_time
-            self.last_call_time = clock()
+            self.last_run_time = time.process_time() - start_time
+            self.last_call_time = time.process_time()
         
         if last_call:
             self.last_run_time = 0
@@ -264,12 +265,12 @@
     def data(self, index, role):
         
         if not index.isValid():
-            return QtCore.QVariant()
+            return None
         
         def blank():
             if role == QtCore.Qt.DisplayRole:
-                return QtCore.QVariant("")
-            return QtCore.QVariant()
+                return ""
+            return None
         
         c_rev = self.computed.filtered_revs[index.row()]
         if c_rev is None:
@@ -320,31 +321,30 @@
                              for bug in bugs])
             is_clicked = c_rev.f_index == self.clicked_f_index
             
-            return QtCore.QVariant((c_rev, prev_c_rev, tags, is_clicked))
+            return (c_rev, prev_c_rev, tags, is_clicked)
         
         if (role == QtCore.Qt.DisplayRole and index.column() == COL_REV):
-            return QtCore.QVariant(c_rev.rev.revno_str)
+            return c_rev.rev.revno_str
         
         if role == QtCore.Qt.ToolTipRole and index.column() == COL_MESSAGE:
             urls =  [branch_info.branch.base
                      for (branch_info, label) in c_rev.branch_labels
                      if label]
-            return QtCore.QVariant('\n'.join(urls))
+            return '\n'.join(urls)
         
         if role == RevIdRole:
-            return QtCore.QVariant(c_rev.rev.revid)
+            return c_rev.rev.revid
         
         #Everything from here foward will need to have the revision loaded.
         if revision is None:
             return blank()
         
         if role == QtCore.Qt.DisplayRole and index.column() == COL_DATE:
-            return QtCore.QVariant(strftime("%Y-%m-%d %H:%M",
-                                            localtime(revision.timestamp)))
+            return strftime("%Y-%m-%d %H:%M", localtime(revision.timestamp))
         if role == QtCore.Qt.DisplayRole and index.column() == COL_AUTHOR:
-            return QtCore.QVariant(extract_name(get_apparent_author(revision)))
+            return extract_name(get_apparent_author(revision))
         if role == QtCore.Qt.DisplayRole and index.column() == COL_MESSAGE:
-            return QtCore.QVariant(revision.get_summary())
+            return revision.get_summary()
         
         return blank()
 
@@ -356,8 +356,8 @@
 
     def headerData(self, section, orientation, role):
         if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:
-            return QtCore.QVariant(header_labels[section])
-        return QtCore.QVariant()
+            return header_labels[section]
+        return None
 
     def on_revisions_loaded(self, revisions, last_call):
         for revid in revisions.keys():
diff -Nur qbrz.org/lib/logwidget.py qbrz/lib/logwidget.py
--- qbrz.org/lib/logwidget.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/logwidget.py	2020-03-02 11:03:30.015803883 +0900
@@ -310,7 +310,7 @@
         selection_model = self.selectionModel()
         rows = selection_model.selectedRows()
         expand_indexes_to_ids = \
-            lambda l: [str(i.data(logmodel.RevIdRole).toString())
+            lambda l: [str(i.data(logmodel.RevIdRole))
                        for i in l]
         # Note: we don't do anything is there are 0 selected rows
         if rows:
@@ -319,7 +319,7 @@
         current_index = self.currentIndex()
         if current_index.isValid():
             self.lines_updated_selection_current = \
-                str(current_index.data(logmodel.RevIdRole).toString())
+                str(current_index.data(logmodel.RevIdRole))
         else:
             self.lines_updated_selection_current = None
 
@@ -352,7 +352,7 @@
         indexes = self.get_selection_indexes(index)
         revids = set()
         for index in indexes:
-            revid = str(index.data(logmodel.RevIdRole).toString())
+            revid = index.data(logmodel.RevIdRole)
             revids.add(revid)
             merges = [self.log_model.graph_viz.revisions[rev_index].revid
                       for rev_index in
@@ -364,8 +364,8 @@
         indexes = self.get_selection_indexes(index)
         if len(indexes) == 0:
             return (None, None), 0
-        top_revid = str(indexes[0].data(logmodel.RevIdRole).toString())
-        bot_revid = str(indexes[-1].data(logmodel.RevIdRole).toString())
+        top_revid = indexes[0].data(logmodel.RevIdRole)
+        bot_revid = indexes[-1].data(logmodel.RevIdRole)
         parents = self.log_model.graph_viz.known_graph.get_parent_keys(bot_revid)
         if parents:
             # We need a ui to select which parent.
@@ -393,7 +393,7 @@
             assert(len(gv.branches)==1)
             selected_branch_info = gv.branches[0]
         
-        revid = str(self.currentIndex().data(logmodel.RevIdRole).toString())
+        revid = self.currentIndex().data(logmodel.RevIdRole)
         revno = gv.revid_rev[revid].revno_str
         revs = [RevisionSpec.from_string(revno)]
         branch = selected_branch_info.branch
@@ -572,7 +572,7 @@
     
     def show_revision_tree(self):
         from breezy.plugins.qbrz.lib.browse import BrowseWindow
-        revid = str(self.currentIndex().data(logmodel.RevIdRole).toString())
+        revid = self.currentIndex().data(logmodel.RevIdRole)
         gv = self.log_model.graph_viz
         if revid.startswith(CURRENT_REVISION):
             location = gv.working_trees[revid].abspath('')
@@ -632,7 +632,7 @@
         self.graphprovider = graphprovider
         for branch in self.graphprovider.branches:
             action = QtGui.QAction(branch.label, self)
-            action.setData(QtCore.QVariant(branch))
+            action.setData(branch)
             self.addAction(action)
             if require_wt and branch.tree is None:
                 action.setDisabled(True)
@@ -666,23 +666,10 @@
     _twistyColor = QtCore.Qt.black
 
     def paint(self, painter, option, index):
-        data = index.data(logmodel.GraphDataRole)
-        if data.isValid():
+        if index.isValid():
             draw_graph = True
-            if QtCore.PYQT_VERSION_STR.startswith('4.5.'):
-                # toPyObject is buggy in 4.5
-                def toPy (x):
-                    if isinstance(x, QtCore.QVariant):
-                        return x.toPyObject()
-                    else:
-                        return x
-                c_rev, prev_c_rev, labels, is_clicked = (
-                    toPy(item) for item in data.toPyObject())
-                labels = [[toPy(x) for x in toPy(label)]
-                           for label in toPy(labels)]
-            else:
-                c_rev, prev_c_rev, labels, is_clicked = data.toPyObject()
-            
+            data = index.data(logmodel.GraphDataRole)
+            c_rev, prev_c_rev, labels, is_clicked = data
         else:
             draw_graph = False
         
@@ -797,7 +784,7 @@
                 painter.restore()
             rect.adjust(x, 0, 0, 0)
         
-        if not option.text.isEmpty():
+        if option.text:
             painter.setPen(get_text_color(option, style))
             text_rect = rect.adjusted(0, 0, -text_margin, 0)
             painter.setFont(option.font)
diff -Nur qbrz.org/lib/main.py qbrz/lib/main.py
--- qbrz.org/lib/main.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/main.py	2020-03-02 11:03:29.848799699 +0900
@@ -73,8 +73,8 @@
 class SideBarItem(object):
 
     def __init__(self):
-        self.icon = QtCore.QVariant()
-        self.text = QtCore.QVariant()
+        self.icon = None
+        self.text = None
         self.parent = None
         self.children = []
 
@@ -92,8 +92,8 @@
 
     def __init__(self, fileInfo, parent, sidebar):
         self.path = fileInfo.filePath()
-        self.icon = QtCore.QVariant(sidebar.window.icons['folder'])
-        self.text = QtCore.QVariant(fileInfo.fileName() or fileInfo.path())
+        self.icon = sidebar.window.icons['folder']
+        self.text = fileInfo.fileName() or fileInfo.path()
         self.parent = parent
         self.children = None
 
@@ -116,8 +116,8 @@
 
     def __init__(self, sidebar):
         self.isBranch = False
-        self.icon = QtCore.QVariant(sidebar.window.icons['computer'])
-        self.text = QtCore.QVariant(gettext("Computer"))
+        self.icon = sidebar.window.icons['computer']
+        self.text = gettext("Computer")
         self.parent = sidebar.root
         self.children = None
 
@@ -139,8 +139,8 @@
 
     def __init__(self, name, path, parent, sidebar):
         self.path = path
-        self.icon = QtCore.QVariant(sidebar.window.icons['folder'])
-        self.text = QtCore.QVariant(name)
+        self.icon = sidebar.window.icons['folder']
+        self.text = name
         self.parent = parent
         self.children = None
 
@@ -161,8 +161,8 @@
 
     def __init__(self, sidebar):
         self.window = sidebar.window
-        self.icon = QtCore.QVariant(sidebar.window.icons['bookmark'])
-        self.text = QtCore.QVariant(gettext("Bookmarks"))
+        self.icon = sidebar.window.icons['bookmark']
+        self.text = gettext("Bookmarks")
         self.parent = sidebar.root
         self.children = None
         self.contextMenu = QtGui.QMenu()
@@ -205,7 +205,7 @@
             return item.icon
         elif role == QtCore.Qt.DisplayRole:
             return item.text
-        return QtCore.QVariant()
+        return None
 
     def columnCount(self, parent):
         return 1
@@ -543,7 +543,7 @@
             item = QtGui.QTreeWidgetItem(self.fileListView)
             item.setText(0, '..')
             item.setIcon(0, self.icons['folder'])
-            item.setData(0, QtCore.Qt.UserRole, QtCore.QVariant(os.path.dirname(path)))
+            item.setData(0, QtCore.Qt.UserRole, os.path.dirname(path))
             fileInfoList = QtCore.QDir(path).entryInfoList(
                 QtCore.QDir.AllEntries | QtCore.QDir.NoDotAndDotDot,
                 QtCore.QDir.DirsFirst)
@@ -556,7 +556,7 @@
                         icon = 'folder'
                     else:
                         icon = 'folder-' + status
-                    item.setData(0, QtCore.Qt.UserRole, QtCore.QVariant(fileInfo.filePath()))
+                    item.setData(0, QtCore.Qt.UserRole, fileInfo.filePath())
                     item.setIcon(0, self.icons[icon])
                 else:
                     status = self.cache.getFileStatus(pathParts, str(fileInfo.fileName()))
diff -Nur qbrz.org/lib/revisionmessagebrowser.py qbrz/lib/revisionmessagebrowser.py
--- qbrz.org/lib/revisionmessagebrowser.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/revisionmessagebrowser.py	2020-03-02 23:27:30.634823527 +0900
@@ -139,7 +139,7 @@
             painter.end()
             self.document().addResource(QtGui.QTextDocument.ImageResource,
                                         QtCore.QUrl("dot%d" % color),
-                                        QtCore.QVariant(image))
+                                        image)
             self.images.append(image)
         
         self.props_back_color_str = ("#%02X%02X%02X" % 
@@ -184,7 +184,8 @@
             props = []
             message = ""
             props.append((gettext("Revision:"),
-                          "%s revid:%s" % (self.get_revno(revid), revid)))
+                          "%s revid:%s" % (self.get_revno(revid),
+                                           revid.decode('ascii'))))
             
             parents = self.get_parents(revid)
             children = self.get_children(revid)
@@ -209,12 +210,12 @@
                         summary = get_summary(self._all_loaded_revs[revid])
                         revs.append(
                             '<a href="qlog-revid:%s" title="%s">%s%s: %s</a>' %
-                            (revid, htmlencode(summary), color, revno,
+                            (revid.decode('ascii'), htmlencode(summary), color, revno,
                              htmlencode((short_text(summary, 60)))))
                     else:
                         revs.append(
                             '<a href="qlog-revid:%s">%s%srevid: %s</a>' %
-                            (revid, color, revno, revid))
+                            (revid.decode('ascii'), color, revno, revid))
                 return '<br>'.join(revs)
             
             if parents:
@@ -232,6 +233,9 @@
                 except KeyError:
                     #can't get Repository object for uncached revisions
                     pass
+                except AttributeError:
+                    # WorkingTreeRevision object has no attribute 'repository'
+                    pass
 
             if not revid == CURRENT_REVISION:
                 if revid in self._all_loaded_revs:
@@ -274,7 +278,7 @@
         for color, image in enumerate(self.images):
             self.document().addResource(QtGui.QTextDocument.ImageResource,
                                         QtCore.QUrl("dot%d" % color),
-                                        QtCore.QVariant(image))            
+                                        image)            
     
     def loaded_revision_props(self, rev):
         props = []
@@ -314,7 +318,7 @@
         if isinstance(rev, foreign.ForeignRevision):
             foreign_attribs = \
                 rev.mapping.vcs.show_foreign_revid(rev.foreign_revid)
-        elif ":" in rev.revision_id:
+        elif b":" in rev.revision_id:
             try:
                 foreign_revid, mapping = \
                     foreign.foreign_vcs_registry.parse_revision_id(
@@ -385,7 +389,7 @@
         if not indexes:
             self.setHtml("")
         else:
-            revids = [str(index.data(logmodel.RevIdRole).toString())
+            revids = [index.data(logmodel.RevIdRole)
                       for index in indexes]
             self.set_display_revids(
                 revids, self.log_list.log_model.graph_viz.get_repo_revids)
@@ -393,7 +397,7 @@
     def link_clicked(self, url):
         scheme = str(url.scheme())
         if scheme == 'qlog-revid':
-            revision_id = str(url.path())
+            revision_id = str(url.path()).encode('ascii')
             self.log_list.select_revid(revision_id)
         else:
             open_browser(str(url.toEncoded()))
diff -Nur qbrz.org/lib/revisionview.py.~1~ qbrz/lib/revisionview.py.~1~
--- qbrz.org/lib/revisionview.py.~1~	1970-01-01 09:00:00.000000000 +0900
+++ qbrz/lib/revisionview.py.~1~	2020-03-02 17:33:19.795191776 +0900
@@ -0,0 +1,69 @@
+# QBzr - Qt frontend to Bazaar commands
+#
+# Copyright (C) 2006-2007 Gary van der Merwe <garyvdm@gmail.com> 
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+
+from PyQt4 import QtCore, QtGui
+
+from breezy.plugins.qbrz.lib.diffwindow import DiffWindow
+from breezy.plugins.qbrz.lib.diff_arg import InternalDiffArgProvider
+from breezy.plugins.qbrz.lib.revisionmessagebrowser import RevisionMessageBrowser
+from breezy.plugins.qbrz.lib.i18n import gettext
+from breezy.plugins.qbrz.lib.lazycachedrevloader import load_revisions
+
+# DiffWindow has alot of stuff that we need, so we just extend it.
+class RevisionView(DiffWindow):
+    """Shows information, and a diff for a revision, in a window."""
+    
+    def __init__(self, revid, branch, parent=None):
+        self.branch = branch
+        self.revid = revid
+        
+        args = InternalDiffArgProvider(None, revid, branch, branch)
+        DiffWindow.__init__(self, args, parent, allow_refresh=False)
+        
+        self.message_browser = RevisionMessageBrowser(self)
+        self.message_browser.set_display_revids([self.revid], branch.repository)
+        
+        vsplitter = QtGui.QSplitter(QtCore.Qt.Vertical)
+        vsplitter.addWidget(self.message_browser)
+        vsplitter.addWidget(self.stack)
+        vsplitter.setStretchFactor(0, 1)
+        vsplitter.setStretchFactor(1, 3)
+        
+        self.centralwidget.layout().insertWidget(1, vsplitter)
+        self.centralwidget.layout().removeWidget(self.stack)
+        
+        self.set_diff_title()
+    
+    def initial_load(self):
+        self.throbber.show()
+        load_revisions([self.revid], self.branch.repository, 
+                       pass_prev_loaded_rev = True,
+                       revisions_loaded = self.revisions_loaded)
+    
+    def revisions_loaded(self, loaded_revs, last_call):
+        revision = loaded_revs[self.revid]
+        self.arg_provider.old_revid = revision.parent_ids[0]
+        super(RevisionView, self).initial_load()
+        self.throbber.hide()
+    
+    def set_diff_title(self):
+        title = [gettext("Revision"), self.revid]
+        self.set_title_and_icon(title)
+
+    def restoreSize(self, name, defaultSize):
+        super(RevisionView, self).restoreSize("revisionview", defaultSize)
diff -Nur qbrz.org/lib/revtreeview.py qbrz/lib/revtreeview.py
--- qbrz.org/lib/revtreeview.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/revtreeview.py	2020-03-02 17:51:00.013926144 +0900
@@ -110,8 +110,7 @@
         revids = []
         while True:
             revid = index.data(RevIdRole)
-            if not revid.isNull():
-                revid = str(revid.toByteArray())
+            if revid is not None:
                 if revid not in revids:
                     revids.append(revid)
             if index == bottom_index:
@@ -228,7 +227,7 @@
         
         painter.setPen(get_text_color(option, style))
         
-        if not option.text.isEmpty():
+        if option.text:
             text = option.text
             paint_revno(painter, text_rect, text, self.max_mainline_digits)
         
@@ -244,12 +243,12 @@
 
 
 def paint_revno(painter, rect, revno, max_mainline_digits):
-    splitpoint = revno.indexOf(".")
+    splitpoint = revno.find(".")
     if splitpoint == -1:
         splitpoint = len(revno)
     mainline, therest = revno[:splitpoint], revno[splitpoint:]
     
-    if mainline.endsWith(" ?"):
+    if mainline.endswith(" ?"):
         mainline = mainline[:-2]
         therest = " ?"
     
diff -Nur qbrz.org/lib/run.py qbrz/lib/run.py
--- qbrz.org/lib/run.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/run.py	2020-03-02 17:48:11.796271016 +0900
@@ -183,6 +183,8 @@
                 category = 'Core'
             else:
                 category = cmd.plugin_name()
+            if category is None:
+                continue
             self.all_cmds['All'].append(name)
             self.all_cmds.setdefault(category, []).append(name)
             if not cmd.hidden:
@@ -314,7 +316,7 @@
         """Launch command."""
         cwd = self._get_cwd()
         args = [self._get_cmd_name()]
-        opt_arg = str(self.ui.opt_arg_edit.text())
+        opt_arg = self.ui.opt_arg_edit.text()
         args.extend(shlex_split_unicode(opt_arg))
         self.process_widget.do_start(cwd, *args)
 
diff -Nur qbrz.org/lib/subprocess.py qbrz/lib/subprocess.py
--- qbrz.org/lib/subprocess.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/subprocess.py	2020-03-02 17:47:11.517319580 +0900
@@ -22,6 +22,7 @@
 
 import os
 import sys
+import time
 
 from PyQt4 import QtCore, QtGui
 from contextlib import contextmanager
@@ -677,8 +678,8 @@
     def _setup_stdout_stderr(self):
         if self.stdout is None:
             writer = codecs.getwriter(osutils.get_terminal_encoding())
-            self.stdout = writer(sys.stdout, errors='replace')
-            self.stderr = writer(sys.stderr, errors='replace')
+            self.stdout = writer(sys.stdout.buffer, errors='replace')
+            self.stderr = writer(sys.stderr.buffer, errors='replace')
 
     def abort(self):
         if self.is_running():
@@ -711,21 +712,21 @@
 
     def readStdout(self):
         # ensure we read from subprocess plain string
-        data = str(self.process.readAllStandardOutput())
+        data = self.process.readAllStandardOutput().data().decode(self.encoding)
         # we need unicode for all strings except bencoded streams
         for line in data.splitlines():
             if line.startswith(SUB_PROGRESS):
                 try:
                     progress, transport_activity, task_info = bencode.bdecode(
-                        line[len(SUB_PROGRESS):])
+                        line[len(SUB_PROGRESS):].encode(self.encoding))
                     messages = [b.decode("utf-8") for b in task_info]
                 except ValueError as e:
                     # we got malformed data from qsubprocess (bencode failed to decode)
                     # so just show it in the status console
                     self.logMessageEx("qsubprocess error: "+str(e), "error", self.stderr)
-                    self.logMessageEx(line.decode(self.encoding), "error", self.stderr)
+                    self.logMessageEx(line, "error", self.stderr)
                 else:
-                    self.setProgress(progress, messages, transport_activity)
+                    self.setProgress(progress, messages, transport_activity.decode("utf-8"))
             elif line.startswith(SUB_GETPASS):
                 prompt = bdecode_prompt(line[len(SUB_GETPASS):])
                 passwd, ok = QtGui.QInputDialog.getText(self,
@@ -776,11 +777,10 @@
                     self.conflicted = True
                     self.conflict_tree_path = bdecode_prompt(msg[len(NOTIFY_CONFLICT):])
             else:
-                line = line.decode(self.encoding, 'replace')
                 self.logMessageEx(line, 'plain', self.stdout)
 
     def readStderr(self):
-        data = str(self.process.readAllStandardError()).decode(self.encoding, 'replace')
+        data = bytes(self.process.readAllStandardError()).decode(self.encoding, 'replace')
         if data:
             self.emit(QtCore.SIGNAL("error()"))
 
@@ -845,6 +845,7 @@
                 if self.conflicted:
                     self.emit(QtCore.SIGNAL("conflicted(QString)"), 
                               self.conflict_tree_path)
+                time.sleep(2)
                 self.emit(QtCore.SIGNAL("finished()"))
         else:
             self.setProgress(1000000, [gettext("Failed!")])
@@ -902,10 +903,11 @@
             task_info = ()
             progress = 0
 
-        trans = self._last_transport_msg
+        trans = self._last_transport_msg.encode("utf-8")
 
+        bdata = bencode.bencode((progress, trans, task_info))
         self._term_file.write(
-            SUB_PROGRESS + bencode.bencode((progress, trans, task_info)) + '\n')
+            SUB_PROGRESS + bdata.decode("utf-8") + '\n')
         self._term_file.flush()
 
     def clear(self):
diff -Nur qbrz.org/lib/syntaxhighlighter.py qbrz/lib/syntaxhighlighter.py
--- qbrz.org/lib/syntaxhighlighter.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/syntaxhighlighter.py	2020-03-02 23:50:11.228858031 +0900
@@ -113,7 +113,7 @@
             if block_len == 0:
                 block.layout().setAdditionalFormats(block_formats)
                 doc.markContentsDirty(block.position(), block.length())
-                block = next(block)
+                block = block.next()
                 block_pos = 0
                 block_len = block.length()                    
                 block_formats = []
diff -Nur qbrz.org/lib/syntaxhighlighter.py.~1~ qbrz/lib/syntaxhighlighter.py.~1~
--- qbrz.org/lib/syntaxhighlighter.py.~1~	1970-01-01 09:00:00.000000000 +0900
+++ qbrz/lib/syntaxhighlighter.py.~1~	2020-03-02 23:31:56.964967258 +0900
@@ -0,0 +1,204 @@
+# -*- coding: utf-8 -*-
+#
+# QBzr - Qt frontend to Bazaar commands
+# Copyright (C) 2009 Gary van der Merwe <garyvdm@gmail.com>
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+
+
+from PyQt4 import QtCore, QtGui
+
+_have_pygments = None
+def have_pygments():
+    global _have_pygments
+    global ClassNotFound
+    global get_lexer_for_filename
+    global get_style_by_name
+    global lex
+    
+    if _have_pygments is None:
+        try:
+            from pygments.util import ClassNotFound
+            from pygments.styles import get_style_by_name
+            from pygments import lex
+            from pygments.lexers import get_lexer_for_filename
+        except ImportError:
+            _have_pygments = False
+        else:
+            _have_pygments = True
+    return _have_pygments
+
+
+def highlight_document(edit, filename):
+    doc = edit.document()
+    
+    if not have_pygments():
+        return
+    
+    try:
+        lexer = get_lexer_for_filename(filename, stripnl=False)
+    except ClassNotFound:
+        return
+
+    style = get_style_by_name("default")
+    
+    font = doc.defaultFont()
+    base_format = QtGui.QTextCharFormat()
+    base_format.setFont(font)
+    token_formats = {}
+    
+    window = edit.window()
+    if hasattr(window, "processEvents"):
+        processEvents = window.processEvents
+    else:
+        processEvents = QtCore.QCoreApplication.processEvents
+    
+    def get_token_format(token):
+        if token in token_formats:
+            return token_formats[token]
+        
+        if token.parent:
+            parent_format = get_token_format(token.parent)
+        else:
+            parent_format = base_format
+        
+        format = QtGui.QTextCharFormat(parent_format)
+        font = format.font()
+        if style.styles_token(token):
+            tstyle = style.style_for_token(token)
+            if tstyle['color']:
+                format.setForeground (QtGui.QColor("#"+tstyle['color']))
+            if tstyle['bold']: font.setWeight(QtGui.QFont.Bold)
+            if tstyle['italic']: font.setItalic (True)
+            if tstyle['underline']: format.setFontUnderline(True)
+            if tstyle['bgcolor']: format.setBackground (QtGui.QColor("#"+tstyle['bgcolor']))
+            # No way to set this for a QTextCharFormat
+            #if tstyle['border']: format.
+        token_formats[token] = format
+        return format
+    
+    text = str(doc.toPlainText())
+    
+    block_count = 0
+    block = doc.firstBlock()
+    assert(isinstance(block, QtGui.QTextBlock))
+    block_pos = 0
+    block_len = block.length()
+    block_formats = []
+    
+    for token, ttext in lex(text, lexer):
+        format_len = len(ttext)
+        format = get_token_format(token)
+        while format_len > 0:
+            format_range = QtGui.QTextLayout.FormatRange()
+            format_range.start = block_pos
+            format_range.length = min(format_len, block_len)
+            format_range.format = format
+            block_formats.append(format_range)
+            block_len -= format_range.length
+            format_len -= format_range.length
+            block_pos += format_range.length
+            if block_len == 0:
+                block.layout().setAdditionalFormats(block_formats)
+                doc.markContentsDirty(block.position(), block.length())
+                block = block.next()
+                block_pos = 0
+                block_len = block.length()                    
+                block_formats = []
+                
+                block_count += 1
+                if block_count % 100 == 0:
+                    processEvents()
+
+
+if __name__ == "__main__":
+    import sys
+    app = QtGui.QApplication(sys.argv)
+
+    python = QtGui.QPlainTextEdit()
+    f = open('syntaxhighlighter.py', 'r')
+    python.setPlainText(f.read())
+    f.close()
+
+    python.setWindowTitle('python')
+    python.show()
+    highlight_document(python, 'syntaxhighlighter.py')
+
+    sys.exit(app.exec_())
+
+
+def format_for_ttype(ttype, format, style=None):
+    if have_pygments() and ttype:
+        if style is None:
+            style = get_style_by_name("default")
+        
+        font = format.font()
+        
+        # If there is no style, use the parent type's style.
+        # It fixes bug 347333 - GaryvdM
+        while not style.styles_token(ttype) and ttype.parent:
+            ttype = ttype.parent
+        
+        tstyle = style.style_for_token(ttype)
+        if tstyle['color']:
+            if isinstance(format, QtGui.QPainter):
+                format.setPen (QtGui.QColor("#"+tstyle['color']))
+            else:
+                format.setForeground (QtGui.QColor("#"+tstyle['color']))
+        if tstyle['bold']: font.setWeight(QtGui.QFont.Bold)
+        if tstyle['italic']: font.setItalic (True)
+        # Can't get this not to affect line height.
+        #if tstyle['underline']: format.setFontUnderline(True)
+        if tstyle['bgcolor']: format.setBackground (QtGui.QColor("#"+tstyle['bgcolor']))
+        # No way to set this for a QTextCharFormat
+        #if tstyle['border']: format.
+    return format
+
+class CachedTTypeFormater(object):
+    def __init__(self, base_format):
+        self.base_format = base_format
+        self._cache = {}
+        if have_pygments():
+            self.style = get_style_by_name("default")
+    
+    def format(self, ttype):
+        if not have_pygments() or not ttype:
+            return self.base_format
+        if ttype in self._cache:
+            format = self._cache[ttype]
+        else:
+            format = QtGui.QTextCharFormat(self.base_format)
+            self._cache[ttype] = format
+            
+            # If there is no style, use the parent type's style.
+            # It fixes bug 347333 - GaryvdM
+            while not self.style.styles_token(ttype) and ttype.parent:
+                ttype = ttype.parent
+                self._cache[ttype] = format
+            
+            format_for_ttype(ttype, format, self.style)
+        
+        return format
+
+def split_tokens_at_lines(tokens):
+    currentLine = []
+    for ttype, value in tokens:
+        vsplit = value.splitlines(True)
+        for v in vsplit:
+            currentLine.append((ttype, v))
+            if v[-1:] in ('\n','\r'):
+                yield currentLine
+                currentLine = []
+    yield currentLine
diff -Nur qbrz.org/lib/syntaxhighlighter.py.~2~ qbrz/lib/syntaxhighlighter.py.~2~
--- qbrz.org/lib/syntaxhighlighter.py.~2~	1970-01-01 09:00:00.000000000 +0900
+++ qbrz/lib/syntaxhighlighter.py.~2~	2020-03-02 23:46:30.861459903 +0900
@@ -0,0 +1,204 @@
+# -*- coding: utf-8 -*-
+#
+# QBzr - Qt frontend to Bazaar commands
+# Copyright (C) 2009 Gary van der Merwe <garyvdm@gmail.com>
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+
+
+from PyQt4 import QtCore, QtGui
+
+_have_pygments = None
+def have_pygments():
+    global _have_pygments
+    global ClassNotFound
+    global get_lexer_for_filename
+    global get_style_by_name
+    global lex
+    
+    if _have_pygments is None:
+        try:
+            from pygments.util import ClassNotFound
+            from pygments.styles import get_style_by_name
+            from pygments import lex
+            from pygments.lexers import get_lexer_for_filename
+        except ImportError:
+            _have_pygments = False
+        else:
+            _have_pygments = True
+    return _have_pygments
+
+
+def highlight_document(edit, filename):
+    doc = edit.document()
+    
+    if not have_pygments():
+        return
+    
+    try:
+        lexer = get_lexer_for_filename(filename, stripnl=False)
+    except ClassNotFound:
+        return
+
+    style = get_style_by_name("default")
+    
+    font = doc.defaultFont()
+    base_format = QtGui.QTextCharFormat()
+    base_format.setFont(font)
+    token_formats = {}
+    
+    window = edit.window()
+    if hasattr(window, "processEvents"):
+        processEvents = window.processEvents
+    else:
+        processEvents = QtCore.QCoreApplication.processEvents
+    
+    def get_token_format(token):
+        if token in token_formats:
+            return token_formats[token]
+        
+        if token.parent:
+            parent_format = get_token_format(token.parent)
+        else:
+            parent_format = base_format
+        
+        format = QtGui.QTextCharFormat(parent_format)
+        font = format.font()
+        if style.styles_token(token):
+            tstyle = style.style_for_token(token)
+            if tstyle['color']:
+                format.setForeground (QtGui.QColor("#"+tstyle['color']))
+            if tstyle['bold']: font.setWeight(QtGui.QFont.Bold)
+            if tstyle['italic']: font.setItalic (True)
+            if tstyle['underline']: format.setFontUnderline(True)
+            if tstyle['bgcolor']: format.setBackground (QtGui.QColor("#"+tstyle['bgcolor']))
+            # No way to set this for a QTextCharFormat
+            #if tstyle['border']: format.
+        token_formats[token] = format
+        return format
+    
+    text = str(doc.toPlainText())
+    
+    block_count = 0
+    block = doc.firstBlock()
+    assert(isinstance(block, QtGui.QTextBlock))
+    block_pos = 0
+    block_len = block.length()
+    block_formats = []
+    
+    for token, ttext in lex(text, lexer):
+        format_len = len(ttext)
+        format = get_token_format(token)
+        while format_len > 0:
+            format_range = QtGui.QTextLayout.FormatRange()
+            format_range.start = block_pos
+            format_range.length = min(format_len, block_len)
+            format_range.format = format
+            block_formats.append(format_range)
+            block_len -= format_range.length
+            format_len -= format_range.length
+            block_pos += format_range.length
+            if block_len == 0:
+                block.layout().setAdditionalFormats(block_formats)
+                doc.markContentsDirty(block.position(), block.length())
+                block = block.next()
+                block_pos = 0
+                block_len = block.length()                    
+                block_formats = []
+                
+                block_count += 1
+                if block_count % 100 == 0:
+                    processEvents()
+
+
+if __name__ == "__main__":
+    import sys
+    app = QtGui.QApplication(sys.argv)
+
+    python = QtGui.QPlainTextEdit()
+    f = open('syntaxhighlighter.py', 'r')
+    python.setPlainText(f.read())
+    f.close()
+
+    python.setWindowTitle('python')
+    python.show()
+    highlight_document(python, 'syntaxhighlighter.py')
+
+    sys.exit(app.exec_())
+
+
+def format_for_ttype(ttype, format, style=None):
+    if have_pygments() and ttype:
+        if style is None:
+            style = get_style_by_name("default")
+        
+        font = format.font()
+        
+        # If there is no style, use the parent type's style.
+        # It fixes bug 347333 - GaryvdM
+        while not style.styles_token(ttype) and ttype.parent:
+            ttype = ttype.parent
+        
+        tstyle = style.style_for_token(ttype)
+        if tstyle['color']:
+            if isinstance(format, QtGui.QPainter):
+                format.setPen (QtGui.QColor("#"+tstyle['color']))
+            else:
+                format.setForeground (QtGui.QColor("#"+tstyle['color']))
+        if tstyle['bold']: font.setWeight(QtGui.QFont.Bold)
+        if tstyle['italic']: font.setItalic (True)
+        # Can't get this not to affect line height.
+        #if tstyle['underline']: format.setFontUnderline(True)
+        if tstyle['bgcolor']: format.setBackground (QtGui.QColor("#"+tstyle['bgcolor']))
+        # No way to set this for a QTextCharFormat
+        #if tstyle['border']: format.
+    return format
+
+class CachedTTypeFormater(object):
+    def __init__(self, base_format):
+        self.base_format = base_format
+        self._cache = {}
+        if have_pygments():
+            self.style = get_style_by_name("default")
+    
+    def format(self, ttype):
+        if not have_pygments() or not ttype:
+            return self.base_format
+        if ttype in self._cache:
+            format = self._cache[ttype]
+        else:
+            format = QtGui.QTextCharFormat(self.base_format)
+            self._cache[ttype] = format
+            
+            # If there is no style, use the parent type's style.
+            # It fixes bug 347333 - GaryvdM
+            while not self.style.styles_token(ttype) and ttype.parent:
+                ttype = ttype.parent
+                self._cache[ttype] = format
+            
+            format_for_ttype(ttype, format, self.style)
+        
+        return format
+
+def split_tokens_at_lines(tokens):
+    currentLine = []
+    for ttype, value in tokens:
+        vsplit = value.splitlines(True)
+        for v in vsplit:
+            currentLine.append((ttype, v))
+            if v[-1:] in ('\n','\r'):
+                yield currentLine
+                currentLine = []
+    yield currentLine
diff -Nur qbrz.org/lib/sysinfo.py qbrz/lib/sysinfo.py
--- qbrz.org/lib/sysinfo.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/sysinfo.py	2020-03-02 11:03:29.836799399 +0900
@@ -53,8 +53,8 @@
         self.ui.bzr_lib_path.setText(breezy_head)
 
         # Bazaar Configuration section
-        self.ui.bzr_config_dir.setText(props.get("bzr-config-dir", "?"))
-        self.ui.bzr_log_file.setText(props.get("bzr-log-file", "?"))
+        self.ui.bzr_config_dir.setText(props.get("brz-config-dir", "?"))
+        self.ui.bzr_log_file.setText(props.get("brz-log-file", "?"))
 
         # Python Interpreter section
         self.ui.python_version.setText(props.get("python-version", "?"))
diff -Nur qbrz.org/lib/tag.py qbrz/lib/tag.py
--- qbrz.org/lib/tag.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/tag.py	2020-03-02 17:45:26.571663131 +0900
@@ -1,3 +1,4 @@
+
 # -*- coding: utf-8 -*-
 #
 # QBzr - Qt frontend to Bazaar commands
@@ -80,8 +81,7 @@
         # update ui
         self.ui.branch_location.setText(url_for_display(branch.base))
         self.ui.cb_tag.clear()
-        self.ui.cb_tag.addItems(QtCore.QStringList(sorted(list(self.tags.keys()),
-                                                          key=str.lower)))
+        self.ui.cb_tag.addItems(sorted(list(self.tags.keys()), key=str.lower))
         self.ui.cb_tag.setEditText("")
         self.ui.cb_tag.setCurrentIndex(-1)
 
diff -Nur qbrz.org/lib/texteditannotate.py qbrz/lib/texteditannotate.py
--- qbrz.org/lib/texteditannotate.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/texteditannotate.py	2020-03-02 17:46:13.650406216 +0900
@@ -40,7 +40,7 @@
         block = self.edit.firstVisibleBlock()
         line_count = block.blockNumber()
         painter = QtGui.QPainter(self)
-        painter.fillRect(event.rect(), self.palette().background())
+        painter.fillRect(event.rect(), self.palette().window())
 
         # Iterate over all visible text blocks in the document.
         while block.isValid():
@@ -54,7 +54,7 @@
             if not block.isVisible() or rect.top() >= event.rect().bottom():
                 break
             self.paint_line(painter, rect, line_count, line_count==current_line)
-            block = next(block)
+            block = block.next()
 
         painter.end()
         
@@ -115,7 +115,7 @@
 
         self.hbox = QtGui.QHBoxLayout(self)
         self.hbox.setSpacing(0)
-        self.hbox.setMargin(0)
+        self.hbox.setContentsMargins(0, 0, 0, 0)
 
 
 class LineNumberEditerFrame(AnnotateEditerFrameBase):
diff -Nur qbrz.org/lib/treewidget.py qbrz/lib/treewidget.py
--- qbrz.org/lib/treewidget.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/treewidget.py	2020-03-02 18:13:51.333080660 +0900
@@ -423,6 +423,8 @@
                         change = ChangeDesc(change)
                         path = change.path()
                         fileid = change.fileid()
+                        if fileid is None: # HOGEHOGE WORKAROUND
+                            continue       # HOGEHOGE
                         if fileid == root_id:
                             continue
                         is_ignored = self.tree.is_ignored(path)
@@ -465,7 +467,7 @@
                         for path in initial_checked_paths:
                             fileid = self.tree.path2id(path)
                             if fileid:
-                                kind = self.tree.kind(path, fileid)
+                                kind = self.tree.kind(path)
                                 if kind == "directory":
                                     item_data = self.inventory_data_by_path.get(path)
                                     if item_data is None:
@@ -546,9 +548,9 @@
         self.emit(QtCore.SIGNAL("layoutChanged()"))
     
     def revision_tree_get_children(self, item_data):
-        for child_id in self.tree.iter_children(item_data.item.file_id):
-            child = self._get_entry(self.tree, child_id)
-            path = self.tree.id2path(child_id)
+        path = self.tree.id2path(item_data.item.file_id)
+        for child in self.tree.iter_child_entries(path):
+            path = self.tree.id2path(child.file_id)
             yield ModelItemData(path, item=child)
     
     def working_tree_get_children(self, item_data):
@@ -583,15 +585,17 @@
             item.kind == 'directory' and not self.changes_mode):
             #Because we create copies, we have to get the real item.
             item = self._get_entry(self.tree, item.file_id)
-            for child_id in self.tree.iter_children(item.file_id):
-                if child_id in self.inventory_data_by_id:
-                    child_item_data = self.inventory_data_by_id[child_id]
+            path = self.tree.id2path(item.file_id)
+            for child in self.tree.iter_child_entries(path):
+
+                if child.file_id in self.inventory_data_by_id:
+                    child_item_data = self.inventory_data_by_id[child.file_id]
                 else:
-                    path = self.tree.id2path(child_id)
+                    path = self.tree.id2path(child.file_id)
                     child_item_data = ModelItemData(path)
 
                 # Create a copy so that we don't have to hold a lock of the wt.
-                child = self._get_entry(self.tree, child_id).copy()
+                child = self._get_entry(self.tree, child.file_id).copy()
                 child_item_data.item = child
                 yield child_item_data
         
@@ -643,7 +647,7 @@
                 self.tree.unlock()
 
     def _get_entry(self, tree, file_id):
-        for _, entry in tree.iter_entries_by_dir([file_id]):
+        for _, entry in tree.iter_entries_by_dir([self.tree.id2path(file_id)]):
             return entry
         raise errors.NoSuchId(tree, file_id)
     
@@ -667,7 +671,7 @@
                 self.set_checked_paths(initial_checked_paths)
             else:
                 self.setData(self._index_from_id(root_id,self.NAME), 
-                             QtCore.QVariant(QtCore.Qt.Checked),
+                             QtCore.Qt.Checked,
                              QtCore.Qt.CheckStateRole)
     
     def append_item(self, item_data, parent_id):
@@ -798,8 +802,8 @@
                 old_checked = item_data.checked
                 item_data.checked = checked
                 return not old_checked == checked
-            
-            value = value.toInt()[0]
+
+            value = int(value)
             if index.internalId() >= len(self.inventory_data):
                 return False
             
@@ -904,7 +908,7 @@
             if not isinstance(self.tree, WorkingTree):
                 return False
             # Rename
-            value = str(value.toString())
+            value = str(value)
             item_data = self.inventory_data[index.internalId()]
             parent = self.inventory_data[item_data.parent_id]
             new_path = posixpath.join(parent.path, value)
@@ -943,53 +947,52 @@
     
     def data(self, index, role):
         if not index.isValid():
-            return QtCore.QVariant()
+            return None
         
         if role >= QtCore.Qt.FontRole and role <= QtCore.Qt.TextColorRole:
-            return QtCore.QVariant()
+            return None
         
         item_data = self.inventory_data[index.internalId()]
         item = item_data.item
         
         if role == self.FILEID:
-            return QtCore.QVariant(QtCore.QByteArray(item.file_id))
+            return QtCore.QByteArray(item.file_id)
         
         column = index.column()
         if column == self.NAME:
             if role == QtCore.Qt.DisplayRole:
-                return QtCore.QVariant(item.name)
+                return item.name
             if role == QtCore.Qt.EditRole:
                 path = item_data.path
                 if item_data.parent_id:
                     parent = self.inventory_data[item_data.parent_id]
                     path = path[len(parent.path)+1:]
-                return QtCore.QVariant(path)
+                return path
             if role == QtCore.Qt.DecorationRole:
                 if item_data.icon is None:
                     if (item_data.change and not item_data.change.is_on_disk()
                         or item.kind == ''):
-                        item_data.icon = QtCore.QVariant(self.missing_icon)
+                        item_data.icon = self.missing_icon
                     elif isinstance(self.tree, WorkingTree):
                         abspath = self.tree.abspath(item_data.path)
                         info = QtCore.QFileInfo(abspath)
-                        item_data.icon = \
-                                QtCore.QVariant(self.icon_provider.icon(info))
+                        item_data.icon = self.icon_provider.icon(info)
                     else:
                         if item.kind == "file":
-                            item_data.icon = QtCore.QVariant(self.file_icon)
+                            item_data.icon = self.file_icon
                         if item.kind == "directory":
-                            item_data.icon = QtCore.QVariant(self.dir_icon)
+                            item_data.icon = self.dir_icon
                         if item.kind == "symlink":
-                            item_data.icon = QtCore.QVariant(self.symlink_icon)
+                            item_data.icon = self.symlink_icon
                 if item_data.icon is None:
-                    item_data.icon = QtCore.QVariant()
+                    item_data.icon = None
                 return item_data.icon
             
             if role ==  QtCore.Qt.CheckStateRole:
                 if not self.checkable:
-                    return QtCore.QVariant()
+                    return None
                 else:
-                    return QtCore.QVariant(item_data.checked)
+                    return item_data.checked
         
         if column == self.STATUS:
             if role == QtCore.Qt.DisplayRole:
@@ -998,44 +1001,45 @@
                     status.append(item_data.change.status())
                 for conflict in item_data.conflicts:
                     status.append(conflict.typestring)
-                return QtCore.QVariant(", ".join(status))
-        
-        revid = item_data.item.revision
+                return ", ".join(status)
+
+        try:
+            revid = item_data.item.revision
+        except AttributeError:
+            # GitTreeDirectory object has no attribute 'repository'
+            return None
+
         if role == self.REVID:
-            if revid is None:
-                return QtCore.QVariant()
-            else:
-                return QtCore.QVariant(revid)
+            return revid
         
         if column == self.REVNO:
             if role == QtCore.Qt.DisplayRole:
                 if self.revno_map is not None and revid in self.revno_map:
                     revno_sequence = self.revno_map[revid]
-                    return QtCore.QVariant(
-                        ".".join(["%d" % (revno) for revno in revno_sequence]))
+                    return \
+                        ".".join(["%d" % (revno) for revno in revno_sequence])
                 else:
-                    return QtCore.QVariant("")
+                    return ""
 
         if role == QtCore.Qt.DisplayRole:
             if revid in cached_revisions:
                 rev = cached_revisions[revid]
                 
                 if column == self.AUTHOR:
-                    return QtCore.QVariant(get_apparent_author_name(rev))
+                    return get_apparent_author_name(rev)
 
                 if column == self.MESSAGE:
-                    return QtCore.QVariant(get_summary(rev))
+                    return get_summary(rev)
         
                 if column == self.DATE:
-                    return QtCore.QVariant(strftime("%Y-%m-%d %H:%M",   
-                                                    localtime(rev.timestamp)))
+                    return strftime("%Y-%m-%d %H:%M", localtime(rev.timestamp))
         
         if role == self.PATH:
-            return QtCore.QVariant(item_data.path)
+            return item_data.path
         
         if role == QtCore.Qt.DisplayRole:
-            return QtCore.QVariant("")
-        return QtCore.QVariant()
+            return ""
+        return None
     
     def flags(self, index):
         if not index.isValid():
@@ -1062,8 +1066,8 @@
 
     def headerData(self, section, orientation, role):
         if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:
-            return QtCore.QVariant(self.HEADER_LABELS[section])
-        return QtCore.QVariant()
+            return self.HEADER_LABELS[section]
+        return None
     
     def on_revisions_loaded(self, revisions, last_call):
         for item_data in self.inventory_data:
@@ -1076,7 +1080,10 @@
                           self.createIndex (item_data.row, self.AUTHOR, item_data.id))
 
     def get_repo(self):
-        return self.branch.repository
+        if self.branch is not None:
+            return self.branch.repository
+        else:
+            return None
     
     def item2ref(self, item_data):
         return PersistantItemReference(item_data.item.file_id,
@@ -1165,11 +1172,11 @@
     def set_checked_items(self, refs, ignore_no_file_error=True):
         # set every thing off
         root_index = self._index_from_id(0, self.NAME)
-        self.setData(root_index, QtCore.QVariant(QtCore.Qt.Unchecked),
+        self.setData(root_index, QtCore.Qt.Unchecked,
                      QtCore.Qt.CheckStateRole)
         
         for index in self.refs2indexes(refs, ignore_no_file_error):
-            self.setData(index, QtCore.QVariant(QtCore.Qt.Checked),
+            self.setData(index, QtCore.Qt.Checked,
                          QtCore.Qt.CheckStateRole)
 
     def set_checked_paths(self, paths):
@@ -1307,7 +1314,7 @@
         self.actions = []
         for i, text in enumerate(filters):
             action = QtGui.QAction(text, self)
-            action.setData(QtCore.QVariant (i))
+            action.setData(i)
             action.setCheckable(True)
             self.addAction(action)
             self.actions.append(action)
@@ -1541,7 +1548,7 @@
                         try:
                             index = self.tree_model.ref2index(ref)
                             self.tree_model.setData(index,
-                                                    QtCore.QVariant(state),
+                                                    state,
                                                     QtCore.Qt.CheckStateRole)
                         except (errors.NoSuchId, errors.NoSuchFile):
                             pass
@@ -1863,8 +1870,8 @@
     def show_file_annotate(self):
         """Show qannotate for selected file."""
         index = self.currentIndex()
-        file_id = str(index.data(self.tree_model.FILEID).toByteArray())
-        path = str(index.data(self.tree_model.PATH).toString())
+        file_id = bytes(index.data(self.tree_model.FILEID))
+        path = str(index.data(self.tree_model.PATH))
 
         if isinstance(file_id, str):
             raise errors.InternalBzrError('file_id should be plain string, not unicode')
@@ -2099,15 +2106,15 @@
         root_index = model._index_from_id(0, model.NAME)
         
         state = model.data(root_index, QtCore.Qt.CheckStateRole)
-        self.setCheckState(QtCore.Qt.CheckState(state.toInt()[0]))
+        self.setCheckState(QtCore.Qt.CheckState(state))
     
     def clicked(self, state):
         model = self.tree_widget.tree_model
         root_index = model._index_from_id(0, model.NAME)
         if state:
-            state = QtCore.QVariant(QtCore.Qt.Checked)
+            state = QtCore.Qt.Checked
         else:
-            state = QtCore.QVariant(QtCore.Qt.Unchecked)
+            state = QtCore.Qt.Unchecked
         
-        model.setData(root_index, QtCore.QVariant(state),
+        model.setData(root_index, state,
                       QtCore.Qt.CheckStateRole)
diff -Nur qbrz.org/lib/ui_bookmark.py qbrz/lib/ui_bookmark.py
--- qbrz.org/lib/ui_bookmark.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_bookmark.py	2020-03-02 17:41:18.444746725 +0900
@@ -2,51 +2,62 @@
 
 # Form implementation generated from reading ui file 'ui/bookmark.ui'
 #
-# Created: Thu Sep 18 20:58:12 2008
-#      by: PyQt4 UI code generator 4.4.2
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
 
+try:
+    _fromUtf8 = QtCore.QString.fromUtf8
+except AttributeError:
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_BookmarkDialog(object):
     def setupUi(self, BookmarkDialog):
-        BookmarkDialog.setObjectName("BookmarkDialog")
+        BookmarkDialog.setObjectName(_fromUtf8("BookmarkDialog"))
         BookmarkDialog.resize(354, 90)
         self.vboxlayout = QtGui.QVBoxLayout(BookmarkDialog)
-        self.vboxlayout.setObjectName("vboxlayout")
+        self.vboxlayout.setObjectName(_fromUtf8("vboxlayout"))
         self.gridlayout = QtGui.QGridLayout()
-        self.gridlayout.setObjectName("gridlayout")
+        self.gridlayout.setObjectName(_fromUtf8("gridlayout"))
         self.label = QtGui.QLabel(BookmarkDialog)
-        self.label.setObjectName("label")
+        self.label.setObjectName(_fromUtf8("label"))
         self.gridlayout.addWidget(self.label, 0, 0, 1, 1)
         self.name = QtGui.QLineEdit(BookmarkDialog)
-        self.name.setObjectName("name")
+        self.name.setObjectName(_fromUtf8("name"))
         self.gridlayout.addWidget(self.name, 0, 1, 1, 1)
         self.label_2 = QtGui.QLabel(BookmarkDialog)
-        self.label_2.setObjectName("label_2")
+        self.label_2.setObjectName(_fromUtf8("label_2"))
         self.gridlayout.addWidget(self.label_2, 1, 0, 1, 1)
         self.location = QtGui.QLineEdit(BookmarkDialog)
-        self.location.setObjectName("location")
+        self.location.setObjectName(_fromUtf8("location"))
         self.gridlayout.addWidget(self.location, 1, 1, 1, 1)
         self.vboxlayout.addLayout(self.gridlayout)
         spacerItem = QtGui.QSpacerItem(336, 16, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
         self.vboxlayout.addItem(spacerItem)
         self.buttonBox = QtGui.QDialogButtonBox(BookmarkDialog)
         self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
-        self.buttonBox.setObjectName("buttonBox")
+        self.buttonBox.setObjectName(_fromUtf8("buttonBox"))
         self.vboxlayout.addWidget(self.buttonBox)
         self.label.setBuddy(self.name)
         self.label_2.setBuddy(self.location)
 
         self.retranslateUi(BookmarkDialog)
-        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("accepted()"), BookmarkDialog.accept)
-        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("rejected()"), BookmarkDialog.reject)
+        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("accepted()")), BookmarkDialog.accept)
+        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("rejected()")), BookmarkDialog.reject)
         QtCore.QMetaObject.connectSlotsByName(BookmarkDialog)
 
     def retranslateUi(self, BookmarkDialog):
-        self.label.setText(gettext("&Name:"))
-        self.label_2.setText(gettext("&Location:"))
+        self.label.setText(_translate("BookmarkDialog", "&Name:", None))
+        self.label_2.setText(_translate("BookmarkDialog", "&Location:", None))
 
diff -Nur qbrz.org/lib/ui_branch.py qbrz/lib/ui_branch.py
--- qbrz.org/lib/ui_branch.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_branch.py	2020-03-02 17:41:26.135868121 +0900
@@ -2,19 +2,25 @@
 
 # Form implementation generated from reading ui file 'ui/branch.ui'
 #
-# Created: Wed Mar 23 17:07:09 2011
-#      by: PyQt4 UI code generator 4.8.2
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
-
 
 try:
     _fromUtf8 = QtCore.QString.fromUtf8
 except AttributeError:
-    _fromUtf8 = lambda s: s
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_BranchForm(object):
     def setupUi(self, BranchForm):
@@ -96,13 +102,13 @@
         QtCore.QMetaObject.connectSlotsByName(BranchForm)
 
     def retranslateUi(self, BranchForm):
-        BranchForm.setWindowTitle(gettext("Branch"))
-        self.groupBox.setTitle(gettext("Locations"))
-        self.from_label.setText(gettext("&From:"))
-        self.from_picker.setText(gettext("Browse..."))
-        self.to_label.setText(gettext("&To:"))
-        self.to_picker.setText(gettext("Browse..."))
-        self.groupBox_2.setTitle(gettext("Options"))
-        self.bind.setText(gettext("Bind new branch to parent location"))
-        self.revision_label.setText(gettext("&Revision:"))
+        BranchForm.setWindowTitle(_translate("BranchForm", "Branch", None))
+        self.groupBox.setTitle(_translate("BranchForm", "Locations", None))
+        self.from_label.setText(_translate("BranchForm", "&From:", None))
+        self.from_picker.setText(_translate("BranchForm", "Browse...", None))
+        self.to_label.setText(_translate("BranchForm", "&To:", None))
+        self.to_picker.setText(_translate("BranchForm", "Browse...", None))
+        self.groupBox_2.setTitle(_translate("BranchForm", "Options", None))
+        self.bind.setText(_translate("BranchForm", "Bind new branch to parent location", None))
+        self.revision_label.setText(_translate("BranchForm", "&Revision:", None))
 
diff -Nur qbrz.org/lib/ui_info.py qbrz/lib/ui_info.py
--- qbrz.org/lib/ui_info.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_info.py	2020-03-02 17:39:56.276449790 +0900
@@ -2,19 +2,25 @@
 
 # Form implementation generated from reading ui file 'ui/info.ui'
 #
-# Created: Wed May 11 11:25:59 2011
-#      by: PyQt4 UI code generator 4.8.1
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
-
 
 try:
     _fromUtf8 = QtCore.QString.fromUtf8
 except AttributeError:
-    _fromUtf8 = lambda s: s
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_InfoForm(object):
     def setupUi(self, InfoForm):
@@ -40,6 +46,7 @@
         self.tab_basic = QtGui.QWidget()
         self.tab_basic.setObjectName(_fromUtf8("tab_basic"))
         self.verticalLayout_5 = QtGui.QVBoxLayout(self.tab_basic)
+        self.verticalLayout_5.setMargin(0)
         self.verticalLayout_5.setObjectName(_fromUtf8("verticalLayout_5"))
         self.frame = QtGui.QFrame(self.tab_basic)
         self.frame.setFrameShape(QtGui.QFrame.NoFrame)
@@ -57,6 +64,7 @@
         self.tab_detailed = QtGui.QWidget()
         self.tab_detailed.setObjectName(_fromUtf8("tab_detailed"))
         self.verticalLayout_6 = QtGui.QVBoxLayout(self.tab_detailed)
+        self.verticalLayout_6.setMargin(0)
         self.verticalLayout_6.setObjectName(_fromUtf8("verticalLayout_6"))
         self.scrollArea = QtGui.QScrollArea(self.tab_detailed)
         self.scrollArea.setFrameShape(QtGui.QFrame.NoFrame)
@@ -64,10 +72,11 @@
         self.scrollArea.setLineWidth(1)
         self.scrollArea.setWidgetResizable(True)
         self.scrollArea.setObjectName(_fromUtf8("scrollArea"))
-        self.scrollAreaWidgetContents = QtGui.QWidget(self.scrollArea)
+        self.scrollAreaWidgetContents = QtGui.QWidget()
         self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 539, 179))
         self.scrollAreaWidgetContents.setObjectName(_fromUtf8("scrollAreaWidgetContents"))
         self.verticalLayout_2 = QtGui.QVBoxLayout(self.scrollAreaWidgetContents)
+        self.verticalLayout_2.setMargin(0)
         self.verticalLayout_2.setObjectName(_fromUtf8("verticalLayout_2"))
         self.detailed_info = QtGui.QLabel(self.scrollAreaWidgetContents)
         self.detailed_info.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
@@ -83,10 +92,10 @@
         QtCore.QMetaObject.connectSlotsByName(InfoForm)
 
     def retranslateUi(self, InfoForm):
-        self.label_2.setText(gettext("Location:"))
-        self.local_location.setText(gettext("..."))
-        self.basic_info.setText(gettext("Info"))
-        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_basic), gettext("&Basic"))
-        self.detailed_info.setText(gettext("Info"))
-        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_detailed), gettext("&Detailed"))
+        self.label_2.setText(_translate("InfoForm", "Location:", None))
+        self.local_location.setText(_translate("InfoForm", "...", None))
+        self.basic_info.setText(_translate("InfoForm", "Info", None))
+        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_basic), _translate("InfoForm", "&Basic", None))
+        self.detailed_info.setText(_translate("InfoForm", "Info", None))
+        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_detailed), _translate("InfoForm", "&Detailed", None))
 
diff -Nur qbrz.org/lib/ui_init.py qbrz/lib/ui_init.py
--- qbrz.org/lib/ui_init.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_init.py	2020-03-02 17:42:55.775282979 +0900
@@ -2,73 +2,84 @@
 
 # Form implementation generated from reading ui file 'ui/init.ui'
 #
-# Created: Thu Jul 30 12:22:19 2009
-#      by: PyQt4 UI code generator 4.4.3
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
 
+try:
+    _fromUtf8 = QtCore.QString.fromUtf8
+except AttributeError:
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_InitForm(object):
     def setupUi(self, InitForm):
-        InitForm.setObjectName("InitForm")
+        InitForm.setObjectName(_fromUtf8("InitForm"))
         InitForm.resize(417, 351)
         self.verticalLayout = QtGui.QVBoxLayout(InitForm)
         self.verticalLayout.setMargin(9)
-        self.verticalLayout.setObjectName("verticalLayout")
+        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
         self.groupBox_3 = QtGui.QGroupBox(InitForm)
-        self.groupBox_3.setObjectName("groupBox_3")
+        self.groupBox_3.setObjectName(_fromUtf8("groupBox_3"))
         self.horizontalLayout = QtGui.QHBoxLayout(self.groupBox_3)
-        self.horizontalLayout.setObjectName("horizontalLayout")
+        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
         self.location = QtGui.QLineEdit(self.groupBox_3)
         sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
         sizePolicy.setHorizontalStretch(1)
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.location.sizePolicy().hasHeightForWidth())
         self.location.setSizePolicy(sizePolicy)
-        self.location.setObjectName("location")
+        self.location.setObjectName(_fromUtf8("location"))
         self.horizontalLayout.addWidget(self.location)
         self.location_picker = QtGui.QPushButton(self.groupBox_3)
-        self.location_picker.setObjectName("location_picker")
+        self.location_picker.setObjectName(_fromUtf8("location_picker"))
         self.horizontalLayout.addWidget(self.location_picker)
         self.verticalLayout.addWidget(self.groupBox_3)
         self.groupBox = QtGui.QGroupBox(InitForm)
-        self.groupBox.setObjectName("groupBox")
+        self.groupBox.setObjectName(_fromUtf8("groupBox"))
         self.verticalLayout_3 = QtGui.QVBoxLayout(self.groupBox)
-        self.verticalLayout_3.setObjectName("verticalLayout_3")
+        self.verticalLayout_3.setObjectName(_fromUtf8("verticalLayout_3"))
         self.but_init = QtGui.QRadioButton(self.groupBox)
         self.but_init.setChecked(True)
-        self.but_init.setObjectName("but_init")
+        self.but_init.setObjectName(_fromUtf8("but_init"))
         self.verticalLayout_3.addWidget(self.but_init)
         self.horizontalLayout_3 = QtGui.QHBoxLayout()
-        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
+        self.horizontalLayout_3.setObjectName(_fromUtf8("horizontalLayout_3"))
         spacerItem = QtGui.QSpacerItem(20, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
         self.horizontalLayout_3.addItem(spacerItem)
         self.but_append_only = QtGui.QCheckBox(self.groupBox)
-        self.but_append_only.setObjectName("but_append_only")
+        self.but_append_only.setObjectName(_fromUtf8("but_append_only"))
         self.horizontalLayout_3.addWidget(self.but_append_only)
         self.verticalLayout_3.addLayout(self.horizontalLayout_3)
         self.radioButton_2 = QtGui.QRadioButton(self.groupBox)
-        self.radioButton_2.setObjectName("radioButton_2")
+        self.radioButton_2.setObjectName(_fromUtf8("radioButton_2"))
         self.verticalLayout_3.addWidget(self.radioButton_2)
         self.horizontalLayout_4 = QtGui.QHBoxLayout()
-        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
+        self.horizontalLayout_4.setObjectName(_fromUtf8("horizontalLayout_4"))
         spacerItem1 = QtGui.QSpacerItem(20, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
         self.horizontalLayout_4.addItem(spacerItem1)
         self.but_no_trees = QtGui.QCheckBox(self.groupBox)
         self.but_no_trees.setEnabled(False)
-        self.but_no_trees.setObjectName("but_no_trees")
+        self.but_no_trees.setObjectName(_fromUtf8("but_no_trees"))
         self.horizontalLayout_4.addWidget(self.but_no_trees)
         self.verticalLayout_3.addLayout(self.horizontalLayout_4)
         self.link_help = QtGui.QLabel(self.groupBox)
-        self.link_help.setObjectName("link_help")
+        self.link_help.setObjectName(_fromUtf8("link_help"))
         self.verticalLayout_3.addWidget(self.link_help)
         self.horizontalLayout_2 = QtGui.QHBoxLayout()
-        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
+        self.horizontalLayout_2.setObjectName(_fromUtf8("horizontalLayout_2"))
         self.label = QtGui.QLabel(self.groupBox)
-        self.label.setObjectName("label")
+        self.label.setObjectName(_fromUtf8("label"))
         self.horizontalLayout_2.addWidget(self.label)
         self.combo_format = QtGui.QComboBox(self.groupBox)
         sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Fixed)
@@ -76,7 +87,7 @@
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.combo_format.sizePolicy().hasHeightForWidth())
         self.combo_format.setSizePolicy(sizePolicy)
-        self.combo_format.setObjectName("combo_format")
+        self.combo_format.setObjectName(_fromUtf8("combo_format"))
         self.horizontalLayout_2.addWidget(self.combo_format)
         self.verticalLayout_3.addLayout(self.horizontalLayout_2)
         self.scrollArea = QtGui.QScrollArea(self.groupBox)
@@ -86,53 +97,53 @@
         sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
         self.scrollArea.setSizePolicy(sizePolicy)
         self.scrollArea.setWidgetResizable(True)
-        self.scrollArea.setObjectName("scrollArea")
-        self.scrollAreaWidgetContents = QtGui.QWidget(self.scrollArea)
+        self.scrollArea.setObjectName(_fromUtf8("scrollArea"))
+        self.scrollAreaWidgetContents = QtGui.QWidget()
         self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 377, 60))
-        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
+        self.scrollAreaWidgetContents.setObjectName(_fromUtf8("scrollAreaWidgetContents"))
         self.verticalLayout_2 = QtGui.QVBoxLayout(self.scrollAreaWidgetContents)
         self.verticalLayout_2.setMargin(4)
-        self.verticalLayout_2.setObjectName("verticalLayout_2")
+        self.verticalLayout_2.setObjectName(_fromUtf8("verticalLayout_2"))
         self.format_desc = QtGui.QLabel(self.scrollAreaWidgetContents)
         self.format_desc.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
         self.format_desc.setWordWrap(True)
-        self.format_desc.setObjectName("format_desc")
+        self.format_desc.setObjectName(_fromUtf8("format_desc"))
         self.verticalLayout_2.addWidget(self.format_desc)
         self.scrollArea.setWidget(self.scrollAreaWidgetContents)
         self.verticalLayout_3.addWidget(self.scrollArea)
         self.link_help_formats = QtGui.QLabel(self.groupBox)
-        self.link_help_formats.setObjectName("link_help_formats")
+        self.link_help_formats.setObjectName(_fromUtf8("link_help_formats"))
         self.verticalLayout_3.addWidget(self.link_help_formats)
         self.verticalLayout.addWidget(self.groupBox)
 
         self.retranslateUi(InitForm)
-        QtCore.QObject.connect(self.link_help, QtCore.SIGNAL("linkActivated(QString)"), InitForm.linkActivated)
-        QtCore.QObject.connect(self.link_help_formats, QtCore.SIGNAL("linkActivated(QString)"), InitForm.linkActivated)
-        QtCore.QObject.connect(InitForm, QtCore.SIGNAL("disableUi(bool)"), self.groupBox_3.setDisabled)
-        QtCore.QObject.connect(InitForm, QtCore.SIGNAL("disableUi(bool)"), self.groupBox.setDisabled)
-        QtCore.QObject.connect(self.but_init, QtCore.SIGNAL("toggled(bool)"), self.but_append_only.setEnabled)
-        QtCore.QObject.connect(self.radioButton_2, QtCore.SIGNAL("toggled(bool)"), self.but_no_trees.setEnabled)
+        QtCore.QObject.connect(self.link_help, QtCore.SIGNAL(_fromUtf8("linkActivated(QString)")), InitForm.linkActivated)
+        QtCore.QObject.connect(self.link_help_formats, QtCore.SIGNAL(_fromUtf8("linkActivated(QString)")), InitForm.linkActivated)
+        QtCore.QObject.connect(InitForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.groupBox_3.setDisabled)
+        QtCore.QObject.connect(InitForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.groupBox.setDisabled)
+        QtCore.QObject.connect(self.but_init, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.but_append_only.setEnabled)
+        QtCore.QObject.connect(self.radioButton_2, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.but_no_trees.setEnabled)
         QtCore.QMetaObject.connectSlotsByName(InitForm)
 
     def retranslateUi(self, InitForm):
-        InitForm.setWindowTitle(gettext("Initialize"))
-        self.groupBox_3.setTitle(gettext("Local Directory"))
-        self.location_picker.setText(gettext("Browse..."))
-        self.groupBox.setTitle(gettext("Repository"))
-        self.but_init.setText(gettext("Create a new standalone tree"))
-        self.but_append_only.setText(gettext("Ensure all revisions are appended to the log"))
-        self.radioButton_2.setText(gettext("Create a new shared repository"))
-        self.but_no_trees.setText(gettext("Skip the creation of working trees in this repository"))
-        self.link_help.setText(QtGui.QApplication.translate("InitForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+        InitForm.setWindowTitle(_translate("InitForm", "Initialize", None))
+        self.groupBox_3.setTitle(_translate("InitForm", "Local Directory", None))
+        self.location_picker.setText(_translate("InitForm", "Browse...", None))
+        self.groupBox.setTitle(_translate("InitForm", "Repository", None))
+        self.but_init.setText(_translate("InitForm", "Create a new standalone tree", None))
+        self.but_append_only.setText(_translate("InitForm", "Ensure all revisions are appended to the log", None))
+        self.radioButton_2.setText(_translate("InitForm", "Create a new shared repository", None))
+        self.but_no_trees.setText(_translate("InitForm", "Skip the creation of working trees in this repository", None))
+        self.link_help.setText(_translate("InitForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
 "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
 "p, li { white-space: pre-wrap; }\n"
 "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Tell me more about <a href=\"bzrtopic:standalone-trees\"><span style=\" text-decoration: underline; color:#0000ff;\">standalone trees</span></a>, <a href=\"bzrtopic:repositories\"><span style=\" text-decoration: underline; color:#0000ff;\">repositories</span></a> and <a href=\"bzrtopic:branches\"><span style=\" text-decoration: underline; color:#0000ff;\">branches</span></a>.</p></body></html>", None, QtGui.QApplication.UnicodeUTF8))
-        self.label.setText(gettext("Repository Format:"))
-        self.format_desc.setText(gettext("Description of format"))
-        self.link_help_formats.setText(QtGui.QApplication.translate("InitForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Tell me more about <a href=\"bzrtopic:standalone-trees\"><span style=\" text-decoration: underline; color:#0000ff;\">standalone trees</span></a>, <a href=\"bzrtopic:repositories\"><span style=\" text-decoration: underline; color:#0000ff;\">repositories</span></a> and <a href=\"bzrtopic:branches\"><span style=\" text-decoration: underline; color:#0000ff;\">branches</span></a>.</p></body></html>", None))
+        self.label.setText(_translate("InitForm", "Repository Format:", None))
+        self.format_desc.setText(_translate("InitForm", "Description of format", None))
+        self.link_help_formats.setText(_translate("InitForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
 "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
 "p, li { white-space: pre-wrap; }\n"
 "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a href=\"bzrtopic:formats\"><span style=\" text-decoration: underline; color:#0000ff;\">More information about repository formats.</span></a></p></body></html>", None, QtGui.QApplication.UnicodeUTF8))
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a href=\"bzrtopic:formats\"><span style=\" text-decoration: underline; color:#0000ff;\">More information about repository formats.</span></a></p></body></html>", None))
 
diff -Nur qbrz.org/lib/ui_merge.py qbrz/lib/ui_merge.py
--- qbrz.org/lib/ui_merge.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_merge.py	2020-03-02 17:42:28.866858260 +0900
@@ -2,69 +2,80 @@
 
 # Form implementation generated from reading ui file 'ui/merge.ui'
 #
-# Created: Tue Aug 18 15:10:52 2009
-#      by: PyQt4 UI code generator 4.4.4
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
 
+try:
+    _fromUtf8 = QtCore.QString.fromUtf8
+except AttributeError:
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_MergeForm(object):
     def setupUi(self, MergeForm):
-        MergeForm.setObjectName("MergeForm")
+        MergeForm.setObjectName(_fromUtf8("MergeForm"))
         MergeForm.resize(448, 248)
         self.verticalLayout = QtGui.QVBoxLayout(MergeForm)
         self.verticalLayout.setMargin(9)
-        self.verticalLayout.setObjectName("verticalLayout")
+        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
         self.groupBox = QtGui.QGroupBox(MergeForm)
-        self.groupBox.setObjectName("groupBox")
+        self.groupBox.setObjectName(_fromUtf8("groupBox"))
         self.gridLayout = QtGui.QGridLayout(self.groupBox)
-        self.gridLayout.setObjectName("gridLayout")
+        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
         self.label_4 = QtGui.QLabel(self.groupBox)
-        self.label_4.setObjectName("label_4")
+        self.label_4.setObjectName(_fromUtf8("label_4"))
         self.gridLayout.addWidget(self.label_4, 0, 0, 1, 1)
         self.location = QtGui.QComboBox(self.groupBox)
         self.location.setEditable(True)
         self.location.setSizeAdjustPolicy(QtGui.QComboBox.AdjustToMinimumContentsLength)
-        self.location.setObjectName("location")
+        self.location.setObjectName(_fromUtf8("location"))
         self.gridLayout.addWidget(self.location, 0, 1, 1, 2)
         self.location_picker = QtGui.QPushButton(self.groupBox)
-        self.location_picker.setObjectName("location_picker")
+        self.location_picker.setObjectName(_fromUtf8("location_picker"))
         self.gridLayout.addWidget(self.location_picker, 0, 3, 1, 1)
         self.label_3 = QtGui.QLabel(self.groupBox)
-        self.label_3.setObjectName("label_3")
+        self.label_3.setObjectName(_fromUtf8("label_3"))
         self.gridLayout.addWidget(self.label_3, 1, 0, 1, 1)
         self.revision = QtGui.QLineEdit(self.groupBox)
-        self.revision.setObjectName("revision")
+        self.revision.setObjectName(_fromUtf8("revision"))
         self.gridLayout.addWidget(self.revision, 1, 1, 1, 1)
         spacerItem = QtGui.QSpacerItem(107, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
         self.gridLayout.addItem(spacerItem, 1, 2, 1, 2)
         self.remember = QtGui.QCheckBox(self.groupBox)
-        self.remember.setObjectName("remember")
+        self.remember.setObjectName(_fromUtf8("remember"))
         self.gridLayout.addWidget(self.remember, 2, 0, 1, 4)
         self.force = QtGui.QCheckBox(self.groupBox)
-        self.force.setObjectName("force")
+        self.force.setObjectName(_fromUtf8("force"))
         self.gridLayout.addWidget(self.force, 3, 0, 1, 4)
         self.uncommitted = QtGui.QCheckBox(self.groupBox)
-        self.uncommitted.setObjectName("uncommitted")
+        self.uncommitted.setObjectName(_fromUtf8("uncommitted"))
         self.gridLayout.addWidget(self.uncommitted, 4, 0, 1, 4)
         self.verticalLayout.addWidget(self.groupBox)
         self.label_4.setBuddy(self.revision)
         self.label_3.setBuddy(self.revision)
 
         self.retranslateUi(MergeForm)
-        QtCore.QObject.connect(MergeForm, QtCore.SIGNAL("disableUi(bool)"), self.groupBox.setDisabled)
+        QtCore.QObject.connect(MergeForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.groupBox.setDisabled)
         QtCore.QMetaObject.connectSlotsByName(MergeForm)
 
     def retranslateUi(self, MergeForm):
-        MergeForm.setWindowTitle(gettext("Merge"))
-        self.groupBox.setTitle(gettext("Options"))
-        self.label_4.setText(gettext("&Location:"))
-        self.location_picker.setText(gettext("Browse..."))
-        self.label_3.setText(gettext("&Revision:"))
-        self.remember.setText(gettext("Remember this location as a default"))
-        self.force.setText(gettext("Merge even if the working tree has uncommitted changes"))
-        self.uncommitted.setText(gettext("Merge uncommitted changes instead of committed ones"))
+        MergeForm.setWindowTitle(_translate("MergeForm", "Merge", None))
+        self.groupBox.setTitle(_translate("MergeForm", "Options", None))
+        self.label_4.setText(_translate("MergeForm", "&Location:", None))
+        self.location_picker.setText(_translate("MergeForm", "Browse...", None))
+        self.label_3.setText(_translate("MergeForm", "&Revision:", None))
+        self.remember.setText(_translate("MergeForm", "Remember this location as a default", None))
+        self.force.setText(_translate("MergeForm", "Merge even if the working tree has uncommitted changes", None))
+        self.uncommitted.setText(_translate("MergeForm", "Merge uncommitted changes instead of committed ones", None))
 
diff -Nur qbrz.org/lib/ui_merge_config.py qbrz/lib/ui_merge_config.py
--- qbrz.org/lib/ui_merge_config.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_merge_config.py	2020-03-02 17:42:38.347007893 +0900
@@ -2,29 +2,40 @@
 
 # Form implementation generated from reading ui file 'ui/merge_config.ui'
 #
-# Created: Tue Dec 07 00:17:33 2010
-#      by: PyQt4 UI code generator 4.7.2
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
 
+try:
+    _fromUtf8 = QtCore.QString.fromUtf8
+except AttributeError:
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_MergeConfig(object):
     def setupUi(self, MergeConfig):
-        MergeConfig.setObjectName("MergeConfig")
+        MergeConfig.setObjectName(_fromUtf8("MergeConfig"))
         MergeConfig.resize(544, 330)
         self.verticalLayout = QtGui.QVBoxLayout(MergeConfig)
-        self.verticalLayout.setObjectName("verticalLayout")
+        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
         self.groupBox = QtGui.QGroupBox(MergeConfig)
-        self.groupBox.setObjectName("groupBox")
+        self.groupBox.setObjectName(_fromUtf8("groupBox"))
         self.verticalLayout_2 = QtGui.QVBoxLayout(self.groupBox)
-        self.verticalLayout_2.setObjectName("verticalLayout_2")
+        self.verticalLayout_2.setObjectName(_fromUtf8("verticalLayout_2"))
         self.tools = QtGui.QTableView(self.groupBox)
         self.tools.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
         self.tools.setShowGrid(False)
-        self.tools.setObjectName("tools")
+        self.tools.setObjectName(_fromUtf8("tools"))
         self.tools.horizontalHeader().setHighlightSections(False)
         self.tools.horizontalHeader().setStretchLastSection(True)
         self.tools.verticalHeader().setVisible(False)
@@ -32,19 +43,20 @@
         self.tools.verticalHeader().setMinimumSectionSize(15)
         self.verticalLayout_2.addWidget(self.tools)
         self.widget = QtGui.QWidget(self.groupBox)
-        self.widget.setObjectName("widget")
+        self.widget.setObjectName(_fromUtf8("widget"))
         self.horizontalLayout = QtGui.QHBoxLayout(self.widget)
-        self.horizontalLayout.setObjectName("horizontalLayout")
+        self.horizontalLayout.setMargin(0)
+        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
         spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
         self.horizontalLayout.addItem(spacerItem)
         self.add = QtGui.QPushButton(self.widget)
-        self.add.setObjectName("add")
+        self.add.setObjectName(_fromUtf8("add"))
         self.horizontalLayout.addWidget(self.add)
         self.remove = QtGui.QPushButton(self.widget)
-        self.remove.setObjectName("remove")
+        self.remove.setObjectName(_fromUtf8("remove"))
         self.horizontalLayout.addWidget(self.remove)
         self.set_default = QtGui.QPushButton(self.widget)
-        self.set_default.setObjectName("set_default")
+        self.set_default.setObjectName(_fromUtf8("set_default"))
         self.horizontalLayout.addWidget(self.set_default)
         spacerItem1 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
         self.horizontalLayout.addItem(spacerItem1)
@@ -55,10 +67,10 @@
         QtCore.QMetaObject.connectSlotsByName(MergeConfig)
 
     def retranslateUi(self, MergeConfig):
-        MergeConfig.setWindowTitle(gettext("Form"))
-        self.groupBox.setTitle(gettext("External Merge Tools"))
-        self.add.setText(gettext("Add"))
-        self.remove.setText(gettext("Remove"))
-        self.set_default.setToolTip(gettext("Sets the selected merge tool as the default to use in qconflicts."))
-        self.set_default.setText(gettext("Set Default"))
+        MergeConfig.setWindowTitle(_translate("MergeConfig", "Form", None))
+        self.groupBox.setTitle(_translate("MergeConfig", "External Merge Tools", None))
+        self.add.setText(_translate("MergeConfig", "Add", None))
+        self.remove.setText(_translate("MergeConfig", "Remove", None))
+        self.set_default.setToolTip(_translate("MergeConfig", "Sets the selected merge tool as the default to use in qconflicts.", None))
+        self.set_default.setText(_translate("MergeConfig", "Set Default", None))
 
diff -Nur qbrz.org/lib/ui_new_tree.py qbrz/lib/ui_new_tree.py
--- qbrz.org/lib/ui_new_tree.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_new_tree.py	2020-03-02 17:42:20.168720969 +0900
@@ -2,58 +2,69 @@
 
 # Form implementation generated from reading ui file 'ui/new_tree.ui'
 #
-# Created: Thu Aug 13 20:49:03 2009
-#      by: PyQt4 UI code generator 4.4.3
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
 
+try:
+    _fromUtf8 = QtCore.QString.fromUtf8
+except AttributeError:
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_NewWorkingTreeForm(object):
     def setupUi(self, NewWorkingTreeForm):
-        NewWorkingTreeForm.setObjectName("NewWorkingTreeForm")
+        NewWorkingTreeForm.setObjectName(_fromUtf8("NewWorkingTreeForm"))
         NewWorkingTreeForm.resize(479, 385)
         self.verticalLayout = QtGui.QVBoxLayout(NewWorkingTreeForm)
         self.verticalLayout.setMargin(9)
-        self.verticalLayout.setObjectName("verticalLayout")
+        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
         self.groupBox = QtGui.QGroupBox(NewWorkingTreeForm)
-        self.groupBox.setObjectName("groupBox")
+        self.groupBox.setObjectName(_fromUtf8("groupBox"))
         self.gridLayout = QtGui.QGridLayout(self.groupBox)
-        self.gridLayout.setObjectName("gridLayout")
+        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
         self.label_4 = QtGui.QLabel(self.groupBox)
-        self.label_4.setObjectName("label_4")
+        self.label_4.setObjectName(_fromUtf8("label_4"))
         self.gridLayout.addWidget(self.label_4, 0, 0, 1, 2)
         self.from_location = QtGui.QComboBox(self.groupBox)
         self.from_location.setEditable(True)
         self.from_location.setSizeAdjustPolicy(QtGui.QComboBox.AdjustToMinimumContentsLength)
-        self.from_location.setObjectName("from_location")
+        self.from_location.setObjectName(_fromUtf8("from_location"))
         self.gridLayout.addWidget(self.from_location, 1, 0, 1, 1)
         self.from_picker = QtGui.QPushButton(self.groupBox)
-        self.from_picker.setObjectName("from_picker")
+        self.from_picker.setObjectName(_fromUtf8("from_picker"))
         self.gridLayout.addWidget(self.from_picker, 1, 1, 1, 1)
         self.label = QtGui.QLabel(self.groupBox)
         font = QtGui.QFont()
         font.setUnderline(False)
         self.label.setFont(font)
         self.label.setOpenExternalLinks(False)
-        self.label.setObjectName("label")
+        self.label.setObjectName(_fromUtf8("label"))
         self.gridLayout.addWidget(self.label, 2, 0, 1, 2)
         self.to_location = QtGui.QLineEdit(self.groupBox)
-        self.to_location.setObjectName("to_location")
+        self.to_location.setObjectName(_fromUtf8("to_location"))
         self.gridLayout.addWidget(self.to_location, 3, 0, 1, 1)
         self.to_picker = QtGui.QPushButton(self.groupBox)
-        self.to_picker.setObjectName("to_picker")
+        self.to_picker.setObjectName(_fromUtf8("to_picker"))
         self.gridLayout.addWidget(self.to_picker, 3, 1, 1, 1)
         self.verticalLayout.addWidget(self.groupBox)
         self.groupBox_3 = QtGui.QGroupBox(NewWorkingTreeForm)
-        self.groupBox_3.setObjectName("groupBox_3")
+        self.groupBox_3.setObjectName(_fromUtf8("groupBox_3"))
         self.gridLayout_2 = QtGui.QGridLayout(self.groupBox_3)
-        self.gridLayout_2.setObjectName("gridLayout_2")
+        self.gridLayout_2.setObjectName(_fromUtf8("gridLayout_2"))
         self.but_checkout = QtGui.QRadioButton(self.groupBox_3)
         self.but_checkout.setChecked(True)
-        self.but_checkout.setObjectName("but_checkout")
+        self.but_checkout.setObjectName(_fromUtf8("but_checkout"))
         self.gridLayout_2.addWidget(self.but_checkout, 0, 0, 1, 2)
         spacerItem = QtGui.QSpacerItem(18, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
         self.gridLayout_2.addItem(spacerItem, 1, 0, 1, 1)
@@ -63,38 +74,38 @@
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.but_lightweight.sizePolicy().hasHeightForWidth())
         self.but_lightweight.setSizePolicy(sizePolicy)
-        self.but_lightweight.setObjectName("but_lightweight")
+        self.but_lightweight.setObjectName(_fromUtf8("but_lightweight"))
         self.gridLayout_2.addWidget(self.but_lightweight, 1, 1, 1, 1)
         self.but_branch = QtGui.QRadioButton(self.groupBox_3)
-        self.but_branch.setObjectName("but_branch")
+        self.but_branch.setObjectName(_fromUtf8("but_branch"))
         self.gridLayout_2.addWidget(self.but_branch, 2, 0, 1, 2)
         spacerItem1 = QtGui.QSpacerItem(18, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
         self.gridLayout_2.addItem(spacerItem1, 3, 0, 1, 1)
         self.but_stacked = QtGui.QCheckBox(self.groupBox_3)
         self.but_stacked.setEnabled(False)
-        self.but_stacked.setObjectName("but_stacked")
+        self.but_stacked.setObjectName(_fromUtf8("but_stacked"))
         self.gridLayout_2.addWidget(self.but_stacked, 3, 1, 1, 1)
         self.link_help = QtGui.QLabel(self.groupBox_3)
         font = QtGui.QFont()
         font.setUnderline(True)
         self.link_help.setFont(font)
-        self.link_help.setCursor(QtCore.Qt.ArrowCursor)
+        self.link_help.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
         self.link_help.setTextFormat(QtCore.Qt.RichText)
         self.link_help.setOpenExternalLinks(False)
         self.link_help.setTextInteractionFlags(QtCore.Qt.TextBrowserInteraction)
-        self.link_help.setObjectName("link_help")
+        self.link_help.setObjectName(_fromUtf8("link_help"))
         self.gridLayout_2.addWidget(self.link_help, 4, 0, 1, 2)
         self.verticalLayout.addWidget(self.groupBox_3)
         self.groupBox_2 = QtGui.QGroupBox(NewWorkingTreeForm)
-        self.groupBox_2.setObjectName("groupBox_2")
+        self.groupBox_2.setObjectName(_fromUtf8("groupBox_2"))
         self.gridLayout_3 = QtGui.QGridLayout(self.groupBox_2)
-        self.gridLayout_3.setObjectName("gridLayout_3")
+        self.gridLayout_3.setObjectName(_fromUtf8("gridLayout_3"))
         self.but_rev_tip = QtGui.QRadioButton(self.groupBox_2)
         self.but_rev_tip.setChecked(True)
-        self.but_rev_tip.setObjectName("but_rev_tip")
+        self.but_rev_tip.setObjectName(_fromUtf8("but_rev_tip"))
         self.gridLayout_3.addWidget(self.but_rev_tip, 0, 0, 1, 2)
         self.but_rev_specific = QtGui.QRadioButton(self.groupBox_2)
-        self.but_rev_specific.setObjectName("but_rev_specific")
+        self.but_rev_specific.setObjectName(_fromUtf8("but_rev_specific"))
         self.gridLayout_3.addWidget(self.but_rev_specific, 1, 0, 1, 1)
         self.revision = QtGui.QLineEdit(self.groupBox_2)
         self.revision.setEnabled(False)
@@ -103,65 +114,65 @@
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.revision.sizePolicy().hasHeightForWidth())
         self.revision.setSizePolicy(sizePolicy)
-        self.revision.setObjectName("revision")
+        self.revision.setObjectName(_fromUtf8("revision"))
         self.gridLayout_3.addWidget(self.revision, 1, 1, 1, 1)
         self.but_show_log = QtGui.QPushButton(self.groupBox_2)
         self.but_show_log.setEnabled(False)
-        self.but_show_log.setObjectName("but_show_log")
+        self.but_show_log.setObjectName(_fromUtf8("but_show_log"))
         self.gridLayout_3.addWidget(self.but_show_log, 1, 3, 1, 1)
         self.link_help_revisions = QtGui.QLabel(self.groupBox_2)
-        self.link_help_revisions.setObjectName("link_help_revisions")
+        self.link_help_revisions.setObjectName(_fromUtf8("link_help_revisions"))
         self.gridLayout_3.addWidget(self.link_help_revisions, 1, 2, 1, 1)
         self.verticalLayout.addWidget(self.groupBox_2)
 
         self.retranslateUi(NewWorkingTreeForm)
-        QtCore.QObject.connect(self.link_help, QtCore.SIGNAL("linkActivated(QString)"), NewWorkingTreeForm.linkActivated)
-        QtCore.QObject.connect(self.link_help_revisions, QtCore.SIGNAL("linkActivated(QString)"), NewWorkingTreeForm.linkActivated)
-        QtCore.QObject.connect(self.but_checkout, QtCore.SIGNAL("toggled(bool)"), self.but_lightweight.setEnabled)
-        QtCore.QObject.connect(self.but_branch, QtCore.SIGNAL("toggled(bool)"), self.but_stacked.setEnabled)
-        QtCore.QObject.connect(self.but_rev_specific, QtCore.SIGNAL("toggled(bool)"), self.revision.setEnabled)
-        QtCore.QObject.connect(NewWorkingTreeForm, QtCore.SIGNAL("disableUi(bool)"), self.groupBox.setDisabled)
-        QtCore.QObject.connect(NewWorkingTreeForm, QtCore.SIGNAL("disableUi(bool)"), self.groupBox_3.setDisabled)
-        QtCore.QObject.connect(NewWorkingTreeForm, QtCore.SIGNAL("disableUi(bool)"), self.groupBox_2.setDisabled)
+        QtCore.QObject.connect(self.link_help, QtCore.SIGNAL(_fromUtf8("linkActivated(QString)")), NewWorkingTreeForm.linkActivated)
+        QtCore.QObject.connect(self.link_help_revisions, QtCore.SIGNAL(_fromUtf8("linkActivated(QString)")), NewWorkingTreeForm.linkActivated)
+        QtCore.QObject.connect(self.but_checkout, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.but_lightweight.setEnabled)
+        QtCore.QObject.connect(self.but_branch, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.but_stacked.setEnabled)
+        QtCore.QObject.connect(self.but_rev_specific, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.revision.setEnabled)
+        QtCore.QObject.connect(NewWorkingTreeForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.groupBox.setDisabled)
+        QtCore.QObject.connect(NewWorkingTreeForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.groupBox_3.setDisabled)
+        QtCore.QObject.connect(NewWorkingTreeForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.groupBox_2.setDisabled)
         QtCore.QMetaObject.connectSlotsByName(NewWorkingTreeForm)
 
     def retranslateUi(self, NewWorkingTreeForm):
-        NewWorkingTreeForm.setWindowTitle(gettext("Create a new Bazaar Working Tree"))
-        self.groupBox.setTitle(gettext("Branch"))
-        self.label_4.setText(gettext("Branch source (enter a URL or select a local directory with an existing branch)"))
-        self.from_picker.setText(gettext("Browse..."))
-        self.label.setText(gettext("Local directory where the working tree will be created"))
-        self.to_picker.setText(gettext("Browse..."))
-        self.groupBox_3.setTitle(gettext("Working Tree Options"))
-        self.but_checkout.setText(gettext("Create a checkout"))
-        self.but_lightweight.setToolTip(QtGui.QApplication.translate("NewWorkingTreeForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+        NewWorkingTreeForm.setWindowTitle(_translate("NewWorkingTreeForm", "Create a new Bazaar Working Tree", None))
+        self.groupBox.setTitle(_translate("NewWorkingTreeForm", "Branch", None))
+        self.label_4.setText(_translate("NewWorkingTreeForm", "Branch source (enter a URL or select a local directory with an existing branch)", None))
+        self.from_picker.setText(_translate("NewWorkingTreeForm", "Browse...", None))
+        self.label.setText(_translate("NewWorkingTreeForm", "Local directory where the working tree will be created", None))
+        self.to_picker.setText(_translate("NewWorkingTreeForm", "Browse...", None))
+        self.groupBox_3.setTitle(_translate("NewWorkingTreeForm", "Working Tree Options", None))
+        self.but_checkout.setText(_translate("NewWorkingTreeForm", "Create a checkout", None))
+        self.but_lightweight.setToolTip(_translate("NewWorkingTreeForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
 "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
 "p, li { white-space: pre-wrap; }\n"
 "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
 "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-style:italic;\">Lightweight checkouts </span>depend on access to the branch for every operation.</p>\n"
 "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Normal checkouts can perform common operations like diff and status without such access, and also support local commits.</p>\n"
-"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"></p></body></html>", None, QtGui.QApplication.UnicodeUTF8))
-        self.but_lightweight.setText(gettext("Light-weight checkout"))
-        self.but_branch.setText(gettext("Make a local copy of the branch"))
-        self.but_stacked.setToolTip(QtGui.QApplication.translate("NewWorkingTreeForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"></p></body></html>", None))
+        self.but_lightweight.setText(_translate("NewWorkingTreeForm", "Light-weight checkout", None))
+        self.but_branch.setText(_translate("NewWorkingTreeForm", "Make a local copy of the branch", None))
+        self.but_stacked.setToolTip(_translate("NewWorkingTreeForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
 "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
 "p, li { white-space: pre-wrap; }\n"
 "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A <span style=\" font-style:italic;\">stacked branch</span> only stores information not in the source branch, and as such, depends on the availability of the source branch</p></body></html>", None, QtGui.QApplication.UnicodeUTF8))
-        self.but_stacked.setText(gettext("Create a stacked branch referring to the source branch"))
-        self.link_help.setToolTip(gettext("Click a link for more information about checkouts and branches."))
-        self.link_help.setText(QtGui.QApplication.translate("NewWorkingTreeForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A <span style=\" font-style:italic;\">stacked branch</span> only stores information not in the source branch, and as such, depends on the availability of the source branch</p></body></html>", None))
+        self.but_stacked.setText(_translate("NewWorkingTreeForm", "Create a stacked branch referring to the source branch", None))
+        self.link_help.setToolTip(_translate("NewWorkingTreeForm", "Click a link for more information about checkouts and branches.", None))
+        self.link_help.setText(_translate("NewWorkingTreeForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
 "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
 "p, li { white-space: pre-wrap; }\n"
 "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\">Tell me more about <a href=\"bzrtopic:checkouts\"><span style=\" text-decoration: underline; color:#0000ff;\">checkouts</span></a> and <a href=\"bzrtopic:branches\"><span style=\" text-decoration: underline; color:#0000ff;\">branches</span></a></p></body></html>", None, QtGui.QApplication.UnicodeUTF8))
-        self.groupBox_2.setTitle(gettext("Revision"))
-        self.but_rev_tip.setText(gettext("Most recent (tip) revision"))
-        self.but_rev_specific.setText(gettext("Revision:"))
-        self.but_show_log.setText(gettext("Show Log..."))
-        self.link_help_revisions.setText(QtGui.QApplication.translate("NewWorkingTreeForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\">Tell me more about <a href=\"bzrtopic:checkouts\"><span style=\" text-decoration: underline; color:#0000ff;\">checkouts</span></a> and <a href=\"bzrtopic:branches\"><span style=\" text-decoration: underline; color:#0000ff;\">branches</span></a></p></body></html>", None))
+        self.groupBox_2.setTitle(_translate("NewWorkingTreeForm", "Revision", None))
+        self.but_rev_tip.setText(_translate("NewWorkingTreeForm", "Most recent (tip) revision", None))
+        self.but_rev_specific.setText(_translate("NewWorkingTreeForm", "Revision:", None))
+        self.but_show_log.setText(_translate("NewWorkingTreeForm", "Show Log...", None))
+        self.link_help_revisions.setText(_translate("NewWorkingTreeForm", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
 "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
 "p, li { white-space: pre-wrap; }\n"
 "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"><a href=\"bzrtopic:revisionspec\"><span style=\" text-decoration: underline; color:#0000ff;\">About revision identifiers</span></a></p></body></html>", None, QtGui.QApplication.UnicodeUTF8))
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"><a href=\"bzrtopic:revisionspec\"><span style=\" text-decoration: underline; color:#0000ff;\">About revision identifiers</span></a></p></body></html>", None))
 
diff -Nur qbrz.org/lib/ui_pull.py qbrz/lib/ui_pull.py
--- qbrz.org/lib/ui_pull.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_pull.py	2020-03-02 17:40:19.040809100 +0900
@@ -2,66 +2,77 @@
 
 # Form implementation generated from reading ui file 'ui/pull.ui'
 #
-# Created: Mon Oct 05 19:41:19 2009
-#      by: PyQt4 UI code generator 4.4.3
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
 
+try:
+    _fromUtf8 = QtCore.QString.fromUtf8
+except AttributeError:
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_PullForm(object):
     def setupUi(self, PullForm):
-        PullForm.setObjectName("PullForm")
+        PullForm.setObjectName(_fromUtf8("PullForm"))
         PullForm.resize(404, 194)
         self.verticalLayout = QtGui.QVBoxLayout(PullForm)
         self.verticalLayout.setMargin(9)
-        self.verticalLayout.setObjectName("verticalLayout")
+        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
         self.groupBox = QtGui.QGroupBox(PullForm)
-        self.groupBox.setObjectName("groupBox")
+        self.groupBox.setObjectName(_fromUtf8("groupBox"))
         self.gridLayout = QtGui.QGridLayout(self.groupBox)
-        self.gridLayout.setObjectName("gridLayout")
+        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
         self.label_2 = QtGui.QLabel(self.groupBox)
-        self.label_2.setObjectName("label_2")
+        self.label_2.setObjectName(_fromUtf8("label_2"))
         self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
         self.location = QtGui.QComboBox(self.groupBox)
         self.location.setEditable(True)
         self.location.setSizeAdjustPolicy(QtGui.QComboBox.AdjustToMinimumContentsLength)
-        self.location.setObjectName("location")
+        self.location.setObjectName(_fromUtf8("location"))
         self.gridLayout.addWidget(self.location, 0, 1, 1, 2)
         self.location_picker = QtGui.QPushButton(self.groupBox)
-        self.location_picker.setObjectName("location_picker")
+        self.location_picker.setObjectName(_fromUtf8("location_picker"))
         self.gridLayout.addWidget(self.location_picker, 0, 3, 1, 1)
         self.label_3 = QtGui.QLabel(self.groupBox)
-        self.label_3.setObjectName("label_3")
+        self.label_3.setObjectName(_fromUtf8("label_3"))
         self.gridLayout.addWidget(self.label_3, 1, 0, 1, 1)
         self.revision = QtGui.QLineEdit(self.groupBox)
-        self.revision.setObjectName("revision")
+        self.revision.setObjectName(_fromUtf8("revision"))
         self.gridLayout.addWidget(self.revision, 1, 1, 1, 1)
         spacerItem = QtGui.QSpacerItem(211, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
         self.gridLayout.addItem(spacerItem, 1, 2, 1, 2)
         self.remember = QtGui.QCheckBox(self.groupBox)
         self.remember.setChecked(False)
-        self.remember.setObjectName("remember")
+        self.remember.setObjectName(_fromUtf8("remember"))
         self.gridLayout.addWidget(self.remember, 2, 0, 1, 4)
         self.overwrite = QtGui.QCheckBox(self.groupBox)
-        self.overwrite.setObjectName("overwrite")
+        self.overwrite.setObjectName(_fromUtf8("overwrite"))
         self.gridLayout.addWidget(self.overwrite, 3, 0, 1, 4)
         self.verticalLayout.addWidget(self.groupBox)
         self.label_2.setBuddy(self.location)
         self.label_3.setBuddy(self.revision)
 
         self.retranslateUi(PullForm)
-        QtCore.QObject.connect(PullForm, QtCore.SIGNAL("disableUi(bool)"), self.groupBox.setDisabled)
+        QtCore.QObject.connect(PullForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.groupBox.setDisabled)
         QtCore.QMetaObject.connectSlotsByName(PullForm)
 
     def retranslateUi(self, PullForm):
-        PullForm.setWindowTitle(gettext("Pull"))
-        self.groupBox.setTitle(gettext("Options"))
-        self.label_2.setText(gettext("&Location:"))
-        self.location_picker.setText(gettext("Browse..."))
-        self.label_3.setText(gettext("&Revision:"))
-        self.remember.setText(gettext("Remember this location as a default"))
-        self.overwrite.setText(gettext("Overwrite differences between branches"))
+        PullForm.setWindowTitle(_translate("PullForm", "Pull", None))
+        self.groupBox.setTitle(_translate("PullForm", "Options", None))
+        self.label_2.setText(_translate("PullForm", "&Location:", None))
+        self.location_picker.setText(_translate("PullForm", "Browse...", None))
+        self.label_3.setText(_translate("PullForm", "&Revision:", None))
+        self.remember.setText(_translate("PullForm", "Remember this location as a default", None))
+        self.overwrite.setText(_translate("PullForm", "Overwrite differences between branches", None))
 
diff -Nur qbrz.org/lib/ui_push.py qbrz/lib/ui_push.py
--- qbrz.org/lib/ui_push.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_push.py	2020-03-02 11:03:29.821799023 +0900
@@ -15,7 +15,7 @@
     def setupUi(self, PushForm):
         PushForm.setObjectName("PushForm")
         PushForm.resize(349, 175)
-        self.verticalLayout = QtGui.QVBoxLayout(PushForm)
+        self.verticalLayout = QtGui.QVBoxLayouty(PushForm)
         self.verticalLayout.setMargin(9)
         self.verticalLayout.setObjectName("verticalLayout")
         self.groupBox = QtGui.QGroupBox(PushForm)
@@ -26,7 +26,8 @@
         self.label_2.setObjectName("label_2")
         self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
         self.location = QtGui.QComboBox(self.groupBox)
-        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
+        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding,
+                                           QtGui.QSizePolicy.Fixed)
         sizePolicy.setHorizontalStretch(0)
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.location.sizePolicy().hasHeightForWidth())
diff -Nur qbrz.org/lib/ui_run.py qbrz/lib/ui_run.py
--- qbrz.org/lib/ui_run.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_run.py	2020-03-02 17:40:42.679182206 +0900
@@ -2,90 +2,100 @@
 
 # Form implementation generated from reading ui file 'ui/run.ui'
 #
-# Created: Fri Jan 22 18:18:46 2010
-#      by: PyQt4 UI code generator 4.6.1
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
 
+try:
+    _fromUtf8 = QtCore.QString.fromUtf8
+except AttributeError:
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_RunDialog(object):
     def setupUi(self, RunDialog):
-        RunDialog.setObjectName("RunDialog")
+        RunDialog.setObjectName(_fromUtf8("RunDialog"))
         RunDialog.resize(473, 367)
         self.main_v_layout = QtGui.QVBoxLayout(RunDialog)
-        self.main_v_layout.setObjectName("main_v_layout")
+        self.main_v_layout.setObjectName(_fromUtf8("main_v_layout"))
         self.splitter = QtGui.QSplitter(RunDialog)
         self.splitter.setOrientation(QtCore.Qt.Vertical)
         self.splitter.setOpaqueResize(False)
         self.splitter.setChildrenCollapsible(False)
-        self.splitter.setObjectName("splitter")
+        self.splitter.setObjectName(_fromUtf8("splitter"))
         self.run_container = QtGui.QGroupBox(self.splitter)
-        self.run_container.setObjectName("run_container")
+        self.run_container.setObjectName(_fromUtf8("run_container"))
         self.run_container_layout = QtGui.QVBoxLayout(self.run_container)
-        self.run_container_layout.setMargin(0)
-        self.run_container_layout.setObjectName("run_container_layout")
+        self.run_container_layout.setObjectName(_fromUtf8("run_container_layout"))
         self.wd_layout = QtGui.QHBoxLayout()
-        self.wd_layout.setObjectName("wd_layout")
+        self.wd_layout.setObjectName(_fromUtf8("wd_layout"))
         self.wd_label = QtGui.QLabel(self.run_container)
-        self.wd_label.setObjectName("wd_label")
+        self.wd_label.setObjectName(_fromUtf8("wd_label"))
         self.wd_layout.addWidget(self.wd_label)
         self.wd_edit = QtGui.QLineEdit(self.run_container)
-        self.wd_edit.setObjectName("wd_edit")
+        self.wd_edit.setObjectName(_fromUtf8("wd_edit"))
         self.wd_layout.addWidget(self.wd_edit)
         self.browse_button = QtGui.QPushButton(self.run_container)
-        self.browse_button.setObjectName("browse_button")
+        self.browse_button.setObjectName(_fromUtf8("browse_button"))
         self.wd_layout.addWidget(self.browse_button)
         self.run_container_layout.addLayout(self.wd_layout)
         self.cmd_layout = QtGui.QGridLayout()
-        self.cmd_layout.setObjectName("cmd_layout")
+        self.cmd_layout.setObjectName(_fromUtf8("cmd_layout"))
         self.cat_label = QtGui.QLabel(self.run_container)
-        self.cat_label.setObjectName("cat_label")
+        self.cat_label.setObjectName(_fromUtf8("cat_label"))
         self.cmd_layout.addWidget(self.cat_label, 0, 0, 1, 1)
         self.cat_combobox = QtGui.QComboBox(self.run_container)
         self.cat_combobox.setMinimumSize(QtCore.QSize(170, 0))
-        self.cat_combobox.setObjectName("cat_combobox")
+        self.cat_combobox.setObjectName(_fromUtf8("cat_combobox"))
         self.cmd_layout.addWidget(self.cat_combobox, 0, 1, 1, 1)
         self.cmd_label = QtGui.QLabel(self.run_container)
-        self.cmd_label.setObjectName("cmd_label")
+        self.cmd_label.setObjectName(_fromUtf8("cmd_label"))
         self.cmd_layout.addWidget(self.cmd_label, 1, 0, 1, 1)
         self.cmd_combobox = QtGui.QComboBox(self.run_container)
         self.cmd_combobox.setMinimumSize(QtCore.QSize(170, 0))
         self.cmd_combobox.setEditable(True)
-        self.cmd_combobox.setObjectName("cmd_combobox")
+        self.cmd_combobox.setObjectName(_fromUtf8("cmd_combobox"))
         self.cmd_layout.addWidget(self.cmd_combobox, 1, 1, 1, 1)
         self.hidden_checkbox = QtGui.QCheckBox(self.run_container)
-        self.hidden_checkbox.setObjectName("hidden_checkbox")
+        self.hidden_checkbox.setObjectName(_fromUtf8("hidden_checkbox"))
         self.cmd_layout.addWidget(self.hidden_checkbox, 1, 2, 1, 1)
         self.run_container_layout.addLayout(self.cmd_layout)
         self.opt_arg_label = QtGui.QLabel(self.run_container)
         self.opt_arg_label.setLineWidth(0)
-        self.opt_arg_label.setObjectName("opt_arg_label")
+        self.opt_arg_label.setObjectName(_fromUtf8("opt_arg_label"))
         self.run_container_layout.addWidget(self.opt_arg_label)
         self.opt_arg_edit = QtGui.QLineEdit(self.run_container)
-        self.opt_arg_edit.setObjectName("opt_arg_edit")
+        self.opt_arg_edit.setObjectName(_fromUtf8("opt_arg_edit"))
         self.run_container_layout.addWidget(self.opt_arg_edit)
         self.opt_arg_btn_layout = QtGui.QHBoxLayout()
-        self.opt_arg_btn_layout.setObjectName("opt_arg_btn_layout")
+        self.opt_arg_btn_layout.setObjectName(_fromUtf8("opt_arg_btn_layout"))
         self.directory_button = QtGui.QPushButton(self.run_container)
-        self.directory_button.setObjectName("directory_button")
+        self.directory_button.setObjectName(_fromUtf8("directory_button"))
         self.opt_arg_btn_layout.addWidget(self.directory_button)
         self.filenames_button = QtGui.QPushButton(self.run_container)
-        self.filenames_button.setObjectName("filenames_button")
+        self.filenames_button.setObjectName(_fromUtf8("filenames_button"))
         self.opt_arg_btn_layout.addWidget(self.filenames_button)
         spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
         self.opt_arg_btn_layout.addItem(spacerItem)
         self.run_container_layout.addLayout(self.opt_arg_btn_layout)
         self.help_browser = QtGui.QTextBrowser(self.run_container)
-        self.help_browser.setObjectName("help_browser")
+        self.help_browser.setObjectName(_fromUtf8("help_browser"))
         self.run_container_layout.addWidget(self.help_browser)
         self.subprocess_container = QtGui.QWidget(self.splitter)
-        self.subprocess_container.setObjectName("subprocess_container")
+        self.subprocess_container.setObjectName(_fromUtf8("subprocess_container"))
         self.subprocess_container_layout = QtGui.QVBoxLayout(self.subprocess_container)
         self.subprocess_container_layout.setMargin(0)
-        self.subprocess_container_layout.setObjectName("subprocess_container_layout")
+        self.subprocess_container_layout.setObjectName(_fromUtf8("subprocess_container_layout"))
         self.main_v_layout.addWidget(self.splitter)
         self.wd_label.setBuddy(self.wd_edit)
         self.cat_label.setBuddy(self.cmd_combobox)
@@ -93,7 +103,7 @@
         self.opt_arg_label.setBuddy(self.opt_arg_edit)
 
         self.retranslateUi(RunDialog)
-        QtCore.QObject.connect(RunDialog, QtCore.SIGNAL("disableUi(bool)"), self.run_container.setDisabled)
+        QtCore.QObject.connect(RunDialog, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.run_container.setDisabled)
         QtCore.QMetaObject.connectSlotsByName(RunDialog)
         RunDialog.setTabOrder(self.wd_edit, self.browse_button)
         RunDialog.setTabOrder(self.browse_button, self.hidden_checkbox)
@@ -104,14 +114,14 @@
         RunDialog.setTabOrder(self.filenames_button, self.help_browser)
 
     def retranslateUi(self, RunDialog):
-        RunDialog.setWindowTitle(gettext("Run bzr command"))
-        self.run_container.setTitle(gettext("Options"))
-        self.wd_label.setText(gettext("&Working directory:"))
-        self.browse_button.setText(gettext("&Browse..."))
-        self.cat_label.setText(gettext("C&ategory:"))
-        self.cmd_label.setText(gettext("&Command:"))
-        self.hidden_checkbox.setText(gettext("&Show hidden commands"))
-        self.opt_arg_label.setText(gettext("&Options and arguments for command:"))
-        self.directory_button.setText(gettext("Insert &directory..."))
-        self.filenames_button.setText(gettext("Insert &filenames..."))
+        RunDialog.setWindowTitle(_translate("RunDialog", "Run bzr command", None))
+        self.run_container.setTitle(_translate("RunDialog", "Options", None))
+        self.wd_label.setText(_translate("RunDialog", "&Working directory:", None))
+        self.browse_button.setText(_translate("RunDialog", "&Browse...", None))
+        self.cat_label.setText(_translate("RunDialog", "C&ategory:", None))
+        self.cmd_label.setText(_translate("RunDialog", "&Command:", None))
+        self.hidden_checkbox.setText(_translate("RunDialog", "&Show hidden commands", None))
+        self.opt_arg_label.setText(_translate("RunDialog", "&Options and arguments for command:", None))
+        self.directory_button.setText(_translate("RunDialog", "Insert &directory...", None))
+        self.filenames_button.setText(_translate("RunDialog", "Insert &filenames...", None))
 
diff -Nur qbrz.org/lib/ui_sysinfo.py qbrz/lib/ui_sysinfo.py
--- qbrz.org/lib/ui_sysinfo.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_sysinfo.py	2020-03-02 17:42:09.709555883 +0900
@@ -2,106 +2,95 @@
 
 # Form implementation generated from reading ui file 'ui/sysinfo.ui'
 #
-# Created: Sat Jun 13 23:57:47 2009
-#      by: PyQt4 UI code generator 4.3.1
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
 
+try:
+    _fromUtf8 = QtCore.QString.fromUtf8
+except AttributeError:
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_MainWindow(object):
     def setupUi(self, MainWindow):
-        MainWindow.setObjectName("MainWindow")
-        MainWindow.resize(QtCore.QSize(QtCore.QRect(0,0,387,254).size()).expandedTo(MainWindow.minimumSizeHint()))
-
+        MainWindow.setObjectName(_fromUtf8("MainWindow"))
+        MainWindow.resize(387, 254)
         self.centralwidget = QtGui.QWidget(MainWindow)
-        self.centralwidget.setObjectName("centralwidget")
-
+        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
         self.vboxlayout = QtGui.QVBoxLayout(self.centralwidget)
-        self.vboxlayout.setObjectName("vboxlayout")
-
+        self.vboxlayout.setObjectName(_fromUtf8("vboxlayout"))
         self.bazaar_library = QtGui.QGroupBox(self.centralwidget)
         self.bazaar_library.setFlat(False)
-        self.bazaar_library.setObjectName("bazaar_library")
-
+        self.bazaar_library.setObjectName(_fromUtf8("bazaar_library"))
         self.gridlayout = QtGui.QGridLayout(self.bazaar_library)
-        self.gridlayout.setObjectName("gridlayout")
-
+        self.gridlayout.setObjectName(_fromUtf8("gridlayout"))
         self.label = QtGui.QLabel(self.bazaar_library)
-        self.label.setObjectName("label")
-        self.gridlayout.addWidget(self.label,0,0,1,1)
-
+        self.label.setObjectName(_fromUtf8("label"))
+        self.gridlayout.addWidget(self.label, 0, 0, 1, 1)
         self.bzr_version = QtGui.QLabel(self.bazaar_library)
-        self.bzr_version.setObjectName("bzr_version")
-        self.gridlayout.addWidget(self.bzr_version,0,1,1,1)
-
+        self.bzr_version.setObjectName(_fromUtf8("bzr_version"))
+        self.gridlayout.addWidget(self.bzr_version, 0, 1, 1, 1)
         self.label_3 = QtGui.QLabel(self.bazaar_library)
-        self.label_3.setObjectName("label_3")
-        self.gridlayout.addWidget(self.label_3,1,0,1,1)
-
+        self.label_3.setObjectName(_fromUtf8("label_3"))
+        self.gridlayout.addWidget(self.label_3, 1, 0, 1, 1)
         self.bzr_lib_path = QtGui.QLabel(self.bazaar_library)
-        self.bzr_lib_path.setMinimumSize(QtCore.QSize(300,0))
-        self.bzr_lib_path.setObjectName("bzr_lib_path")
-        self.gridlayout.addWidget(self.bzr_lib_path,1,1,1,1)
+        self.bzr_lib_path.setMinimumSize(QtCore.QSize(300, 0))
+        self.bzr_lib_path.setObjectName(_fromUtf8("bzr_lib_path"))
+        self.gridlayout.addWidget(self.bzr_lib_path, 1, 1, 1, 1)
         self.vboxlayout.addWidget(self.bazaar_library)
-
         self.bazaar_configuration = QtGui.QGroupBox(self.centralwidget)
-        self.bazaar_configuration.setObjectName("bazaar_configuration")
-
+        self.bazaar_configuration.setObjectName(_fromUtf8("bazaar_configuration"))
         self.gridlayout1 = QtGui.QGridLayout(self.bazaar_configuration)
-        self.gridlayout1.setObjectName("gridlayout1")
-
+        self.gridlayout1.setObjectName(_fromUtf8("gridlayout1"))
         self.label_2 = QtGui.QLabel(self.bazaar_configuration)
-        self.label_2.setObjectName("label_2")
-        self.gridlayout1.addWidget(self.label_2,0,0,1,1)
-
+        self.label_2.setObjectName(_fromUtf8("label_2"))
+        self.gridlayout1.addWidget(self.label_2, 0, 0, 1, 1)
         self.bzr_config_dir = QtGui.QLabel(self.bazaar_configuration)
-        self.bzr_config_dir.setObjectName("bzr_config_dir")
-        self.gridlayout1.addWidget(self.bzr_config_dir,0,1,1,1)
-
+        self.bzr_config_dir.setObjectName(_fromUtf8("bzr_config_dir"))
+        self.gridlayout1.addWidget(self.bzr_config_dir, 0, 1, 1, 1)
         self.label_4 = QtGui.QLabel(self.bazaar_configuration)
-        self.label_4.setObjectName("label_4")
-        self.gridlayout1.addWidget(self.label_4,1,0,1,1)
-
+        self.label_4.setObjectName(_fromUtf8("label_4"))
+        self.gridlayout1.addWidget(self.label_4, 1, 0, 1, 1)
         self.bzr_log_file = QtGui.QLabel(self.bazaar_configuration)
-        self.bzr_log_file.setMinimumSize(QtCore.QSize(300,0))
-        self.bzr_log_file.setObjectName("bzr_log_file")
-        self.gridlayout1.addWidget(self.bzr_log_file,1,1,1,1)
+        self.bzr_log_file.setMinimumSize(QtCore.QSize(300, 0))
+        self.bzr_log_file.setObjectName(_fromUtf8("bzr_log_file"))
+        self.gridlayout1.addWidget(self.bzr_log_file, 1, 1, 1, 1)
         self.vboxlayout.addWidget(self.bazaar_configuration)
-
         self.python_interpreter = QtGui.QGroupBox(self.centralwidget)
-        self.python_interpreter.setMinimumSize(QtCore.QSize(0,0))
-        self.python_interpreter.setObjectName("python_interpreter")
-
+        self.python_interpreter.setMinimumSize(QtCore.QSize(0, 0))
+        self.python_interpreter.setObjectName(_fromUtf8("python_interpreter"))
         self.gridlayout2 = QtGui.QGridLayout(self.python_interpreter)
-        self.gridlayout2.setObjectName("gridlayout2")
-
+        self.gridlayout2.setObjectName(_fromUtf8("gridlayout2"))
         self.label_5 = QtGui.QLabel(self.python_interpreter)
-        self.label_5.setObjectName("label_5")
-        self.gridlayout2.addWidget(self.label_5,0,0,1,1)
-
+        self.label_5.setObjectName(_fromUtf8("label_5"))
+        self.gridlayout2.addWidget(self.label_5, 0, 0, 1, 1)
         self.python_version = QtGui.QLabel(self.python_interpreter)
-        self.python_version.setObjectName("python_version")
-        self.gridlayout2.addWidget(self.python_version,0,1,1,1)
-
+        self.python_version.setObjectName(_fromUtf8("python_version"))
+        self.gridlayout2.addWidget(self.python_version, 0, 1, 1, 1)
         self.label_9 = QtGui.QLabel(self.python_interpreter)
-        self.label_9.setObjectName("label_9")
-        self.gridlayout2.addWidget(self.label_9,1,0,1,1)
-
+        self.label_9.setObjectName(_fromUtf8("label_9"))
+        self.gridlayout2.addWidget(self.label_9, 1, 0, 1, 1)
         self.python_file = QtGui.QLabel(self.python_interpreter)
-        self.python_file.setObjectName("python_file")
-        self.gridlayout2.addWidget(self.python_file,1,1,1,1)
-
+        self.python_file.setObjectName(_fromUtf8("python_file"))
+        self.gridlayout2.addWidget(self.python_file, 1, 1, 1, 1)
         self.label_7 = QtGui.QLabel(self.python_interpreter)
-        self.label_7.setObjectName("label_7")
-        self.gridlayout2.addWidget(self.label_7,2,0,1,1)
-
+        self.label_7.setObjectName(_fromUtf8("label_7"))
+        self.gridlayout2.addWidget(self.label_7, 2, 0, 1, 1)
         self.python_lib_dir = QtGui.QLabel(self.python_interpreter)
-        self.python_lib_dir.setMinimumSize(QtCore.QSize(300,0))
-        self.python_lib_dir.setObjectName("python_lib_dir")
-        self.gridlayout2.addWidget(self.python_lib_dir,2,1,1,1)
+        self.python_lib_dir.setMinimumSize(QtCore.QSize(300, 0))
+        self.python_lib_dir.setObjectName(_fromUtf8("python_lib_dir"))
+        self.gridlayout2.addWidget(self.python_lib_dir, 2, 1, 1, 1)
         self.vboxlayout.addWidget(self.python_interpreter)
         MainWindow.setCentralWidget(self.centralwidget)
 
@@ -109,22 +98,22 @@
         QtCore.QMetaObject.connectSlotsByName(MainWindow)
 
     def retranslateUi(self, MainWindow):
-        MainWindow.setWindowTitle(gettext("System Information"))
-        self.bazaar_library.setTitle(gettext("Bazaar Library"))
-        self.label.setText(gettext("Version:"))
-        self.bzr_version.setText(gettext("(bzr-version)"))
-        self.label_3.setText(gettext("Path:"))
-        self.bzr_lib_path.setText(gettext("(bzr-lib-path)"))
-        self.bazaar_configuration.setTitle(gettext("Bazaar Configuration"))
-        self.label_2.setText(gettext("Settings:"))
-        self.bzr_config_dir.setText(gettext("(bzr-config-dir)"))
-        self.label_4.setText(gettext("Log File:"))
-        self.bzr_log_file.setText(gettext("(bzr-log-file)"))
-        self.python_interpreter.setTitle(gettext("Python Interpreter"))
-        self.label_5.setText(gettext("Version:"))
-        self.python_version.setText(gettext("(python-version)"))
-        self.label_9.setText(gettext("Path:"))
-        self.python_file.setText(gettext("(python-file)"))
-        self.label_7.setText(gettext("Library:"))
-        self.python_lib_dir.setText(gettext("(python-lib-dir)"))
+        MainWindow.setWindowTitle(_translate("MainWindow", "System Information", None))
+        self.bazaar_library.setTitle(_translate("MainWindow", "Bazaar Library", None))
+        self.label.setText(_translate("MainWindow", "Version:", None))
+        self.bzr_version.setText(_translate("MainWindow", "(bzr-version)", None))
+        self.label_3.setText(_translate("MainWindow", "Path:", None))
+        self.bzr_lib_path.setText(_translate("MainWindow", "(bzr-lib-path)", None))
+        self.bazaar_configuration.setTitle(_translate("MainWindow", "Bazaar Configuration", None))
+        self.label_2.setText(_translate("MainWindow", "Settings:", None))
+        self.bzr_config_dir.setText(_translate("MainWindow", "(bzr-config-dir)", None))
+        self.label_4.setText(_translate("MainWindow", "Log File:", None))
+        self.bzr_log_file.setText(_translate("MainWindow", "(bzr-log-file)", None))
+        self.python_interpreter.setTitle(_translate("MainWindow", "Python Interpreter", None))
+        self.label_5.setText(_translate("MainWindow", "Version:", None))
+        self.python_version.setText(_translate("MainWindow", "(python-version)", None))
+        self.label_9.setText(_translate("MainWindow", "Path:", None))
+        self.python_file.setText(_translate("MainWindow", "(python-file)", None))
+        self.label_7.setText(_translate("MainWindow", "Library:", None))
+        self.python_lib_dir.setText(_translate("MainWindow", "(python-lib-dir)", None))
 
diff -Nur qbrz.org/lib/ui_tag.py qbrz/lib/ui_tag.py
--- qbrz.org/lib/ui_tag.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_tag.py	2020-03-02 17:44:23.864673370 +0900
@@ -2,18 +2,29 @@
 
 # Form implementation generated from reading ui file 'ui/tag.ui'
 #
-# Created: Thu Jul 30 12:12:07 2009
-#      by: PyQt4 UI code generator 4.4.3
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
 
+try:
+    _fromUtf8 = QtCore.QString.fromUtf8
+except AttributeError:
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_TagForm(object):
     def setupUi(self, TagForm):
-        TagForm.setObjectName("TagForm")
+        TagForm.setObjectName(_fromUtf8("TagForm"))
         TagForm.setWindowModality(QtCore.Qt.NonModal)
         TagForm.resize(340, 220)
         sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
@@ -24,50 +35,56 @@
         TagForm.setMinimumSize(QtCore.QSize(0, 0))
         TagForm.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
         self.vboxlayout = QtGui.QVBoxLayout(TagForm)
-        self.vboxlayout.setObjectName("vboxlayout")
+        self.vboxlayout.setMargin(9)
+        self.vboxlayout.setSpacing(6)
+        self.vboxlayout.setObjectName(_fromUtf8("vboxlayout"))
         self.branch_group = QtGui.QGroupBox(TagForm)
-        self.branch_group.setObjectName("branch_group")
+        self.branch_group.setObjectName(_fromUtf8("branch_group"))
         self.gridlayout = QtGui.QGridLayout(self.branch_group)
-        self.gridlayout.setObjectName("gridlayout")
+        self.gridlayout.setMargin(9)
+        self.gridlayout.setSpacing(6)
+        self.gridlayout.setObjectName(_fromUtf8("gridlayout"))
         self.branch_location = QtGui.QLineEdit(self.branch_group)
-        self.branch_location.setObjectName("branch_location")
+        self.branch_location.setObjectName(_fromUtf8("branch_location"))
         self.gridlayout.addWidget(self.branch_location, 0, 0, 1, 2)
         spacerItem = QtGui.QSpacerItem(261, 25, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
         self.gridlayout.addItem(spacerItem, 1, 0, 1, 1)
         self.branch_browse = QtGui.QPushButton(self.branch_group)
-        self.branch_browse.setObjectName("branch_browse")
+        self.branch_browse.setObjectName(_fromUtf8("branch_browse"))
         self.gridlayout.addWidget(self.branch_browse, 1, 1, 1, 1)
         self.vboxlayout.addWidget(self.branch_group)
         self.tag_group = QtGui.QGroupBox(TagForm)
         self.tag_group.setMinimumSize(QtCore.QSize(0, 0))
-        self.tag_group.setObjectName("tag_group")
+        self.tag_group.setObjectName(_fromUtf8("tag_group"))
         self.gridlayout1 = QtGui.QGridLayout(self.tag_group)
-        self.gridlayout1.setObjectName("gridlayout1")
+        self.gridlayout1.setMargin(9)
+        self.gridlayout1.setSpacing(6)
+        self.gridlayout1.setObjectName(_fromUtf8("gridlayout1"))
         self.label_action = QtGui.QLabel(self.tag_group)
-        self.label_action.setObjectName("label_action")
+        self.label_action.setObjectName(_fromUtf8("label_action"))
         self.gridlayout1.addWidget(self.label_action, 0, 0, 1, 1)
         self.cb_action = QtGui.QComboBox(self.tag_group)
-        self.cb_action.setObjectName("cb_action")
-        self.cb_action.addItem(QtCore.QString())
-        self.cb_action.addItem(QtCore.QString())
-        self.cb_action.addItem(QtCore.QString())
+        self.cb_action.setObjectName(_fromUtf8("cb_action"))
+        self.cb_action.addItem(_fromUtf8(""))
+        self.cb_action.addItem(_fromUtf8(""))
+        self.cb_action.addItem(_fromUtf8(""))
         self.gridlayout1.addWidget(self.cb_action, 0, 1, 1, 1)
         self.label_tag_name = QtGui.QLabel(self.tag_group)
-        self.label_tag_name.setObjectName("label_tag_name")
+        self.label_tag_name.setObjectName(_fromUtf8("label_tag_name"))
         self.gridlayout1.addWidget(self.label_tag_name, 1, 0, 1, 1)
         self.cb_tag = QtGui.QComboBox(self.tag_group)
         self.cb_tag.setEditable(True)
-        self.cb_tag.setObjectName("cb_tag")
+        self.cb_tag.setObjectName(_fromUtf8("cb_tag"))
         self.gridlayout1.addWidget(self.cb_tag, 1, 1, 1, 1)
         self.label_revision = QtGui.QLabel(self.tag_group)
-        self.label_revision.setObjectName("label_revision")
+        self.label_revision.setObjectName(_fromUtf8("label_revision"))
         self.gridlayout1.addWidget(self.label_revision, 2, 0, 1, 1)
         self.rev_edit = QtGui.QLineEdit(self.tag_group)
-        self.rev_edit.setObjectName("rev_edit")
+        self.rev_edit.setObjectName(_fromUtf8("rev_edit"))
         self.gridlayout1.addWidget(self.rev_edit, 2, 1, 1, 1)
         self.pick_rev = QtGui.QPushButton(self.tag_group)
         self.pick_rev.setEnabled(False)
-        self.pick_rev.setObjectName("pick_rev")
+        self.pick_rev.setObjectName(_fromUtf8("pick_rev"))
         self.gridlayout1.addWidget(self.pick_rev, 2, 2, 1, 1)
         self.vboxlayout.addWidget(self.tag_group)
         self.label_action.setBuddy(self.cb_action)
@@ -75,8 +92,8 @@
         self.label_revision.setBuddy(self.rev_edit)
 
         self.retranslateUi(TagForm)
-        QtCore.QObject.connect(TagForm, QtCore.SIGNAL("disableUi(bool)"), self.tag_group.setDisabled)
-        QtCore.QObject.connect(TagForm, QtCore.SIGNAL("disableUi(bool)"), self.branch_group.setDisabled)
+        QtCore.QObject.connect(TagForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.tag_group.setDisabled)
+        QtCore.QObject.connect(TagForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.branch_group.setDisabled)
         QtCore.QMetaObject.connectSlotsByName(TagForm)
         TagForm.setTabOrder(self.branch_location, self.branch_browse)
         TagForm.setTabOrder(self.branch_browse, self.cb_action)
@@ -85,15 +102,15 @@
         TagForm.setTabOrder(self.rev_edit, self.pick_rev)
 
     def retranslateUi(self, TagForm):
-        TagForm.setWindowTitle(gettext("Edit tag"))
-        self.branch_group.setTitle(gettext("Branch"))
-        self.branch_browse.setText(gettext("&Browse..."))
-        self.tag_group.setTitle(gettext("Tag"))
-        self.label_action.setText(gettext("&Action:"))
-        self.cb_action.setItemText(0, gettext("Create new tag"))
-        self.cb_action.setItemText(1, gettext("Move existing tag"))
-        self.cb_action.setItemText(2, gettext("Delete existing tag"))
-        self.label_tag_name.setText(gettext("&Tag name:"))
-        self.label_revision.setText(gettext("&Revision:"))
-        self.pick_rev.setText(gettext("&Select..."))
+        TagForm.setWindowTitle(_translate("TagForm", "Edit tag", None))
+        self.branch_group.setTitle(_translate("TagForm", "Branch", None))
+        self.branch_browse.setText(_translate("TagForm", "&Browse...", None))
+        self.tag_group.setTitle(_translate("TagForm", "Tag", None))
+        self.label_action.setText(_translate("TagForm", "&Action:", None))
+        self.cb_action.setItemText(0, _translate("TagForm", "Create new tag", None))
+        self.cb_action.setItemText(1, _translate("TagForm", "Replace existing tag", None))
+        self.cb_action.setItemText(2, _translate("TagForm", "Delete existing tag", None))
+        self.label_tag_name.setText(_translate("TagForm", "&Tag name:", None))
+        self.label_revision.setText(_translate("TagForm", "&Revision:", None))
+        self.pick_rev.setText(_translate("TagForm", "&Select...", None))
 
diff -Nur qbrz.org/lib/ui_update_branch.py qbrz/lib/ui_update_branch.py
--- qbrz.org/lib/ui_update_branch.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_update_branch.py	2020-03-02 17:41:51.079261824 +0900
@@ -2,26 +2,37 @@
 
 # Form implementation generated from reading ui file 'ui/update_branch.ui'
 #
-# Created: Thu Jul 30 12:22:19 2009
-#      by: PyQt4 UI code generator 4.4.3
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
 
+try:
+    _fromUtf8 = QtCore.QString.fromUtf8
+except AttributeError:
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_UpdateBranchForm(object):
     def setupUi(self, UpdateBranchForm):
-        UpdateBranchForm.setObjectName("UpdateBranchForm")
+        UpdateBranchForm.setObjectName(_fromUtf8("UpdateBranchForm"))
         UpdateBranchForm.resize(407, 198)
         self.verticalLayout_3 = QtGui.QVBoxLayout(UpdateBranchForm)
         self.verticalLayout_3.setMargin(9)
-        self.verticalLayout_3.setObjectName("verticalLayout_3")
+        self.verticalLayout_3.setObjectName(_fromUtf8("verticalLayout_3"))
         self.label = QtGui.QLabel(UpdateBranchForm)
         self.label.setScaledContents(False)
         self.label.setWordWrap(False)
-        self.label.setObjectName("label")
+        self.label.setObjectName(_fromUtf8("label"))
         self.verticalLayout_3.addWidget(self.label)
         self.groupBox = QtGui.QGroupBox(UpdateBranchForm)
         sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
@@ -29,23 +40,23 @@
         sizePolicy.setVerticalStretch(1)
         sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
         self.groupBox.setSizePolicy(sizePolicy)
-        self.groupBox.setObjectName("groupBox")
+        self.groupBox.setObjectName(_fromUtf8("groupBox"))
         self.gridLayout = QtGui.QGridLayout(self.groupBox)
-        self.gridLayout.setObjectName("gridLayout")
+        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
         self.location_picker = QtGui.QPushButton(self.groupBox)
-        self.location_picker.setObjectName("location_picker")
+        self.location_picker.setObjectName(_fromUtf8("location_picker"))
         self.gridLayout.addWidget(self.location_picker, 1, 2, 1, 1)
         self.but_pull = QtGui.QRadioButton(self.groupBox)
         self.but_pull.setChecked(True)
-        self.but_pull.setObjectName("but_pull")
+        self.but_pull.setObjectName(_fromUtf8("but_pull"))
         self.gridLayout.addWidget(self.but_pull, 0, 0, 1, 3)
         self.but_pull_remember = QtGui.QCheckBox(self.groupBox)
         self.but_pull_remember.setEnabled(True)
         self.but_pull_remember.setChecked(False)
-        self.but_pull_remember.setObjectName("but_pull_remember")
+        self.but_pull_remember.setObjectName(_fromUtf8("but_pull_remember"))
         self.gridLayout.addWidget(self.but_pull_remember, 2, 1, 1, 2)
         self.but_pull_overwrite = QtGui.QCheckBox(self.groupBox)
-        self.but_pull_overwrite.setObjectName("but_pull_overwrite")
+        self.but_pull_overwrite.setObjectName(_fromUtf8("but_pull_overwrite"))
         self.gridLayout.addWidget(self.but_pull_overwrite, 3, 1, 1, 2)
         spacerItem = QtGui.QSpacerItem(17, 18, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
         self.gridLayout.addItem(spacerItem, 3, 0, 1, 1)
@@ -57,35 +68,41 @@
         self.location.setSizePolicy(sizePolicy)
         self.location.setEditable(True)
         self.location.setSizeAdjustPolicy(QtGui.QComboBox.AdjustToMinimumContentsLength)
-        self.location.setObjectName("location")
-        self.location.addItem(QtCore.QString())
+        self.location.setObjectName(_fromUtf8("location"))
+        self.location.addItem(_fromUtf8(""))
         self.gridLayout.addWidget(self.location, 1, 1, 1, 1)
         spacerItem1 = QtGui.QSpacerItem(18, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
         self.gridLayout.addItem(spacerItem1, 1, 0, 1, 1)
         spacerItem2 = QtGui.QSpacerItem(18, 17, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
         self.gridLayout.addItem(spacerItem2, 2, 0, 1, 1)
         self.but_update = QtGui.QRadioButton(self.groupBox)
-        self.but_update.setObjectName("but_update")
+        self.but_update.setObjectName(_fromUtf8("but_update"))
         self.gridLayout.addWidget(self.but_update, 4, 0, 1, 3)
+        self.location_picker.raise_()
+        self.but_pull.raise_()
+        self.but_pull_remember.raise_()
+        self.but_pull_overwrite.raise_()
+        self.location.raise_()
+        self.but_update.raise_()
         self.verticalLayout_3.addWidget(self.groupBox)
 
         self.retranslateUi(UpdateBranchForm)
-        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL("toggled(bool)"), self.but_pull_remember.setEnabled)
-        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL("toggled(bool)"), self.but_pull_overwrite.setEnabled)
-        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL("toggled(bool)"), self.location.setEnabled)
-        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL("toggled(bool)"), self.location_picker.setEnabled)
-        QtCore.QObject.connect(UpdateBranchForm, QtCore.SIGNAL("disableUi(bool)"), self.label.setDisabled)
-        QtCore.QObject.connect(UpdateBranchForm, QtCore.SIGNAL("disableUi(bool)"), self.groupBox.setDisabled)
+        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.but_pull_remember.setEnabled)
+        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.but_pull_overwrite.setEnabled)
+        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.location.setEnabled)
+        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.location_picker.setEnabled)
+        QtCore.QObject.connect(UpdateBranchForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.label.setDisabled)
+        QtCore.QObject.connect(UpdateBranchForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.groupBox.setDisabled)
         QtCore.QMetaObject.connectSlotsByName(UpdateBranchForm)
 
     def retranslateUi(self, UpdateBranchForm):
-        UpdateBranchForm.setWindowTitle(gettext("Update Branch"))
-        self.label.setText(gettext("This directory is a branch.  Please select what you would like to update"))
-        self.groupBox.setTitle(gettext("Update source"))
-        self.location_picker.setText(gettext("Browse..."))
-        self.but_pull.setText(gettext("Pull most recent changes from:"))
-        self.but_pull_remember.setText(gettext("Remember this as the new parent branch"))
-        self.but_pull_overwrite.setText(gettext("Overwrite differences between branches"))
-        self.location.setItemText(0, gettext("<Parent Branch shown here>"))
-        self.but_update.setText(gettext("Update working tree to the latest changes in the branch"))
+        UpdateBranchForm.setWindowTitle(_translate("UpdateBranchForm", "Update Branch", None))
+        self.label.setText(_translate("UpdateBranchForm", "This directory is a branch.  Please select what you would like to update", None))
+        self.groupBox.setTitle(_translate("UpdateBranchForm", "Update source", None))
+        self.location_picker.setText(_translate("UpdateBranchForm", "Browse...", None))
+        self.but_pull.setText(_translate("UpdateBranchForm", "Pull most recent changes from:", None))
+        self.but_pull_remember.setText(_translate("UpdateBranchForm", "Remember this as the new parent branch", None))
+        self.but_pull_overwrite.setText(_translate("UpdateBranchForm", "Overwrite differences between branches", None))
+        self.location.setItemText(0, _translate("UpdateBranchForm", "<Parent Branch shown here>", None))
+        self.but_update.setText(_translate("UpdateBranchForm", "Update working tree to the latest changes in the branch", None))
 
diff -Nur qbrz.org/lib/ui_update_checkout.py qbrz/lib/ui_update_checkout.py
--- qbrz.org/lib/ui_update_checkout.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_update_checkout.py	2020-03-02 17:41:58.798383662 +0900
@@ -2,41 +2,52 @@
 
 # Form implementation generated from reading ui file 'ui/update_checkout.ui'
 #
-# Created: Thu Jul 30 12:22:19 2009
-#      by: PyQt4 UI code generator 4.4.3
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
 from PyQt4 import QtCore, QtGui
-from breezy.plugins.qbrz.lib.i18n import gettext
 
+try:
+    _fromUtf8 = QtCore.QString.fromUtf8
+except AttributeError:
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_UpdateCheckoutForm(object):
     def setupUi(self, UpdateCheckoutForm):
-        UpdateCheckoutForm.setObjectName("UpdateCheckoutForm")
+        UpdateCheckoutForm.setObjectName(_fromUtf8("UpdateCheckoutForm"))
         UpdateCheckoutForm.resize(317, 170)
         self.verticalLayout = QtGui.QVBoxLayout(UpdateCheckoutForm)
         self.verticalLayout.setMargin(9)
-        self.verticalLayout.setObjectName("verticalLayout")
+        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
         self.label = QtGui.QLabel(UpdateCheckoutForm)
         sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Fixed)
         sizePolicy.setHorizontalStretch(0)
         sizePolicy.setVerticalStretch(0)
         sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
         self.label.setSizePolicy(sizePolicy)
-        self.label.setObjectName("label")
+        self.label.setObjectName(_fromUtf8("label"))
         self.verticalLayout.addWidget(self.label)
         self.groupBox = QtGui.QGroupBox(UpdateCheckoutForm)
-        self.groupBox.setObjectName("groupBox")
+        self.groupBox.setObjectName(_fromUtf8("groupBox"))
         self.gridLayout = QtGui.QGridLayout(self.groupBox)
-        self.gridLayout.setObjectName("gridLayout")
+        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
         self.but_update = QtGui.QRadioButton(self.groupBox)
         self.but_update.setChecked(True)
-        self.but_update.setObjectName("but_update")
+        self.but_update.setObjectName(_fromUtf8("but_update"))
         self.gridLayout.addWidget(self.but_update, 0, 0, 1, 3)
         self.but_pull = QtGui.QRadioButton(self.groupBox)
         self.but_pull.setEnabled(True)
-        self.but_pull.setObjectName("but_pull")
+        self.but_pull.setObjectName(_fromUtf8("but_pull"))
         self.gridLayout.addWidget(self.but_pull, 1, 0, 1, 3)
         spacerItem = QtGui.QSpacerItem(18, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
         self.gridLayout.addItem(spacerItem, 2, 0, 1, 1)
@@ -49,33 +60,33 @@
         self.location.setSizePolicy(sizePolicy)
         self.location.setEditable(True)
         self.location.setSizeAdjustPolicy(QtGui.QComboBox.AdjustToMinimumContentsLength)
-        self.location.setObjectName("location")
+        self.location.setObjectName(_fromUtf8("location"))
         self.gridLayout.addWidget(self.location, 2, 1, 1, 1)
         self.location_picker = QtGui.QPushButton(self.groupBox)
         self.location_picker.setEnabled(False)
-        self.location_picker.setObjectName("location_picker")
+        self.location_picker.setObjectName(_fromUtf8("location_picker"))
         self.gridLayout.addWidget(self.location_picker, 2, 2, 1, 1)
         spacerItem1 = QtGui.QSpacerItem(18, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
         self.gridLayout.addItem(spacerItem1, 3, 0, 1, 1)
         self.but_pull_overwrite = QtGui.QCheckBox(self.groupBox)
         self.but_pull_overwrite.setEnabled(False)
-        self.but_pull_overwrite.setObjectName("but_pull_overwrite")
+        self.but_pull_overwrite.setObjectName(_fromUtf8("but_pull_overwrite"))
         self.gridLayout.addWidget(self.but_pull_overwrite, 3, 1, 1, 2)
         self.verticalLayout.addWidget(self.groupBox)
 
         self.retranslateUi(UpdateCheckoutForm)
-        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL("toggled(bool)"), self.location.setEnabled)
-        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL("toggled(bool)"), self.location_picker.setEnabled)
-        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL("toggled(bool)"), self.but_pull_overwrite.setEnabled)
-        QtCore.QObject.connect(UpdateCheckoutForm, QtCore.SIGNAL("disableUi(bool)"), self.groupBox.setDisabled)
+        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.location.setEnabled)
+        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.location_picker.setEnabled)
+        QtCore.QObject.connect(self.but_pull, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.but_pull_overwrite.setEnabled)
+        QtCore.QObject.connect(UpdateCheckoutForm, QtCore.SIGNAL(_fromUtf8("disableUi(bool)")), self.groupBox.setDisabled)
         QtCore.QMetaObject.connectSlotsByName(UpdateCheckoutForm)
 
     def retranslateUi(self, UpdateCheckoutForm):
-        UpdateCheckoutForm.setWindowTitle(gettext("Update Checkout"))
-        self.label.setText(gettext("This directory is a checkout of: %s"))
-        self.groupBox.setTitle(gettext("Update source"))
-        self.but_update.setText(gettext("Update the working tree from the bound branch"))
-        self.but_pull.setText(gettext("Pull a different branch"))
-        self.location_picker.setText(gettext("Browse..."))
-        self.but_pull_overwrite.setText(gettext("Overwrite differences between branches"))
+        UpdateCheckoutForm.setWindowTitle(_translate("UpdateCheckoutForm", "Update Checkout", None))
+        self.label.setText(_translate("UpdateCheckoutForm", "This directory is a checkout of: %s", None))
+        self.groupBox.setTitle(_translate("UpdateCheckoutForm", "Update source", None))
+        self.but_update.setText(_translate("UpdateCheckoutForm", "Update the working tree from the bound branch", None))
+        self.but_pull.setText(_translate("UpdateCheckoutForm", "Pull a different branch", None))
+        self.location_picker.setText(_translate("UpdateCheckoutForm", "Browse...", None))
+        self.but_pull_overwrite.setText(_translate("UpdateCheckoutForm", "Overwrite differences between branches", None))
 
diff -Nur qbrz.org/lib/ui_verify_signatures.py qbrz/lib/ui_verify_signatures.py
--- qbrz.org/lib/ui_verify_signatures.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/ui_verify_signatures.py	2020-03-02 17:41:33.294981120 +0900
@@ -2,8 +2,7 @@
 
 # Form implementation generated from reading ui file 'ui/verify-signatures.ui'
 #
-# Created: Fri Jun 24 11:51:55 2011
-#      by: PyQt4 UI code generator 4.8.3
+# Created by: PyQt4 UI code generator 4.12.3
 #
 # WARNING! All changes made in this file will be lost!
 
@@ -12,7 +11,16 @@
 try:
     _fromUtf8 = QtCore.QString.fromUtf8
 except AttributeError:
-    _fromUtf8 = lambda s: s
+    def _fromUtf8(s):
+        return s
+
+try:
+    _encoding = QtGui.QApplication.UnicodeUTF8
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+except AttributeError:
+    def _translate(context, text, disambig):
+        return QtGui.QApplication.translate(context, text, disambig)
 
 class Ui_VerifyForm(object):
     def setupUi(self, VerifyForm):
diff -Nur qbrz.org/lib/util.py qbrz/lib/util.py
--- qbrz.org/lib/util.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/util.py	2020-03-02 13:50:01.160316218 +0900
@@ -871,7 +871,7 @@
     @return: True if 0x00 byte found.
     """
     for s in lines:
-        if '\x00' in s:
+        if b'\x00' in s:
             return True
     return False
 
@@ -1077,14 +1077,14 @@
 
 def _shlex_split_unicode_linux(unicode_string):
     """Split unicode string to list of unicode arguments."""
-    return [str(p,'utf8') for p in shlex.split(unicode_string.encode('utf-8'))]
+    return [p for p in shlex.split(unicode_string)]
 
 def _shlex_split_unicode_windows(unicode_string):
     """Split unicode string to list of unicode arguments.
     Take care about backslashes as valid path separators.
     """
     utf8_string = unicode_string.replace('\\', '\\\\').encode('utf-8')
-    return [str(p,'utf8') for p in shlex.split(utf8_string)]
+    return [p for p in shlex.split(utf8_string)]
 
 if MS_WINDOWS:
     shlex_split_unicode = _shlex_split_unicode_windows
diff -Nur qbrz.org/lib/widgets/shelve.py qbrz/lib/widgets/shelve.py
--- qbrz.org/lib/widgets/shelve.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/widgets/shelve.py	2020-03-02 17:34:55.276698845 +0900
@@ -99,7 +99,7 @@
         file_id = change[1]
         def get_kind(tree, path, id):
             try:
-                return tree.kind(path, id)
+                return tree.kind(path)
             except errors.NoSuchFile:
                 return 'file'
         if status == 'delete file':
@@ -177,7 +177,7 @@
             return self.hunk_texts[2]
         patch = self.parsed_patch
         try:
-            texts = [[str(l).decode(encoding) for l in hunk.lines]
+            texts = [[l.as_bytes().decode(encoding) for l in hunk.lines]
                      for hunk in patch.hunks]
         except UnicodeError:
             if self.hunk_texts[1] is None:
@@ -1013,7 +1013,7 @@
                 self.guidebar_deta.append((l1, l2 - l1))
             else:
                 y1 = cursor.block().layout().position().y()
-                cursor.insertText(str(hunk.get_header()), self.monospacedHunkFormat)
+                cursor.insertText(hunk.get_header().decode(encoding), self.monospacedHunkFormat)
                 print_hunk(hunk, hunk_texts)
                 cursor.insertText("\n", self.monospacedFormat)
                 y2 = cursor.block().layout().position().y()
diff -Nur qbrz.org/lib/widgets/shelvelist.py qbrz/lib/widgets/shelvelist.py
--- qbrz.org/lib/widgets/shelvelist.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/widgets/shelvelist.py	2020-03-02 11:03:29.887800676 +0900
@@ -317,7 +317,7 @@
         cleanup.append(shelf_file.close)
         try:
             records = Unshelver.iter_records(shelf_file)
-            revid = Unshelver.parse_metadata(records)['revision_id']
+            revid = Unshelver.parse_metadata(records)[b'revision_id']
             try:
                 base_tree = self.tree.revision_tree(revid)
             except NoSuchRevisionInTree:
diff -Nur qbrz.org/lib/widgets/tab_width_selector.py qbrz/lib/widgets/tab_width_selector.py
--- qbrz.org/lib/widgets/tab_width_selector.py	2020-03-02 22:41:59.552725791 +0900
+++ qbrz/lib/widgets/tab_width_selector.py	2020-03-02 17:34:18.252114453 +0900
@@ -44,7 +44,7 @@
         for tabwidth in range(MIN_TAB_WIDTH, MAX_TAB_WIDTH+1):
             action = QtGui.QAction(str(tabwidth), self.action_group)
             action.setCheckable(True)
-            action.setData(QtCore.QVariant(tabwidth))
+            action.setData(tabwidth)
             self.addAction(action)
             self.tabwidth_actions[tabwidth] = action
 
@@ -58,8 +58,8 @@
             self.triggered(self.tabwidth_actions[initial_tab_width])
 
     def triggered(self, action):
-        tw, success = action.data().toInt()
-        if success and tw != self._tabwidth:
+        tw = action.data()
+        if tw != self._tabwidth:
             self._tabwidth = tw
             self.onChanged(tw)
 
@@ -67,7 +67,7 @@
         if width not in self.tabwidth_actions:
             action = QtGui.QAction(str(width), self.action_group)
             action.setCheckable(True)
-            action.setData(QtCore.QVariant(width))
+            action.setData(width)
             # Find the next highest tab width currently in the menu
             for tw in sorted(self.tabwidth_actions.keys()):
                 if tw > width:
